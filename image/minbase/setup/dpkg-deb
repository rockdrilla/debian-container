#!/bin/sh
# SPDX-License-Identifier: Apache-2.0
# (c) 2023, Konstantin Demin
set -ef

: "${DPKG_DEB:=/usr/bin/dpkg-deb}"

wrap_kind=
file_arg=
for i ; do
	if [ -n "${wrap_kind}" ] ; then
		file_arg="$i"
		break
	fi
	case "$i" in
	--ctrl-tarfile ) wrap_kind=control ;;
	--fsys-tarfile ) wrap_kind=data ;;
	esac
done

# passthrough other dpkg-deb invocations to real binary
[ -n "${wrap_kind}" ] || exec "${DPKG_DEB}" "$@"
[ -n "${file_arg}" ]  || exec "${DPKG_DEB}" "$@"

case "${wrap_kind}" in
control )
	# unpacking same tarball twice at row is trade-off
	if "${DPKG_DEB}" --ctrl-tarfile "${file_arg}" >/dev/null 2>&1 ; then
		exec "${DPKG_DEB}" --ctrl-tarfile "${file_arg}"
	fi
;;
data )
	# assume that both data.tar and control.tar are compressed with same compressor
	# if dpkg-deb can handle control.tar.* then it will handle data.tar.* too
	if "${DPKG_DEB}" --ctrl-tarfile "${file_arg}" >/dev/null 2>&1 ; then
		exec "${DPKG_DEB}" --fsys-tarfile "${file_arg}"
	fi
;;
esac

# unpack manually

me=$(readlink -e "$0")
log() { echo "${me}: $*" >&2 ; }

have_cmd() {
	if ! command -v "$1" >/dev/null 2>&1 ; then
		log "unable to find '$1' - install package '$2' first"
		exit 1
	fi
}

have_cmd ar binutils

# naive test for .deb file
ar t "${file_arg}" >/dev/null

tar_name=
while read -r i ; do
	[ -n "$i" ] || continue

	if [ -n "${tar_name}" ] ; then
		log "extra ${wrap_kind} tarball '$i' in package ${file_arg} - bailing out"
		exit 1
	fi

	tar_name="$i"
done <<-EOF
$(ar t "${file_arg}" | grep -E "^${wrap_kind}\.tar")
EOF

if [ -z "${tar_name}" ] ; then
	log "unable to find '${wrap_kind}' tarball in ${file_arg} - bailing out"
	exit 1
fi

decomp= ; decomp_pkg=
case "${tar_name}" in
*.tar )
	log "plain tarballs in .deb are weird thing"
	decomp='cat'
;;
*.tar.gz )  decomp='gzip -d' decomp_pkg='gzip' ;;
*.tar.xz )  decomp='xz -d'   decomp_pkg='xz-utils' ;;
*.tar.zst ) decomp='zstd -d' decomp_pkg='zstd' ;;
* )
	log "unable to handle '${tar_name}' from ${file_arg} - compression type isn't known to script"
	exit 1
;;
esac

have_cmd "${decomp%% *}" ${decomp_pkg}

ar p "${file_arg}" "${tar_name}" | ${decomp}
