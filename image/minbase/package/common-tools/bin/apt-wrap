#!/bin/sh
# SPDX-License-Identifier: Apache-2.0
# (c) 2022-2023, Konstantin Demin

set -ef

usage() {
	cat >&2 <<-EOF
	# usage: ${0##*/} [options] {apt packages} {command}
	# options:
	#   user switching (for command):
	#     -u USER[:GROUP]
	#     --user USER[:GROUP]
	#     --user=USER[:GROUP]
	EOF
}

msg() { echo "# ${0##*/}: $*" >&2 ; }

join_lines() { sed -zE 's/[[:space:]]+/ /g;s/^ //;s/ $//' ; }

_q=quiet
[ "${APT_WRAP_QUIET:-1}" = 1 ] || _q=

# internal methods
case "$1" in
--begin)
	# begin "session"
	shift

	deps=$(echo "$*" | join_lines)

	w=$(mktemp -d) ; : "${w:?}"

	apt-list-installed > "$w/installed.0"
	apt-list-manual    > "$w/manual.0"

	: > "$w/keep"
	: > "$w/new"

	if [ -z "${deps}" ] ; then
		msg 'warning: nothing was selected as build-deps'
	else
		export APT_METHOD="${APT_WRAP_INSTALL_METHOD:-install}"
		case "${APT_METHOD}" in
		satisfy)
			if ! ${_q} apt-install "${deps}" ; then
				rm -rf "$w"
				exit 1
			fi
		;;
		*)
			if ! ${_q} apt-install ${deps} ; then
				rm -rf "$w"
				exit 1
			fi
		;;
		esac </dev/null >&2

		apt-list-installed > "$w/installed.1"
		apt-list-manual    > "$w/manual.1"

		set +e
		grep -Fxv -f "$w/installed.0" < "$w/installed.1" > "$w/new"
		set -e
	fi

	echo "$w"
	exit 0
;;
--end)
	# end "session"
	shift

	w="$1"

	ok=
	while : ; do
		[ -d "$w" ]             || break
		[ -s "$w/installed.0" ] || break
		[ -s "$w/manual.0" ]    || break
		ok=1 ; break
	done
	if [ -z "${ok}" ] ; then
		msg 'error: wrong state!'
		exit 1
	fi

	x="$w/keep"
	if [ -s "$x" ] ; then
		set +e
		xargs -r -a "$x" \
		  dpkg-query --show --showformat='${Package}:${Architecture}\n' \
		> "$x.adjust"
		grep -Fxv -f "$w/installed.0" "$x.adjust" > "$x"
		set -e
		rm -f "$x.adjust"
		xargs -r -a "$x" \
		  quiet apt-mark manual >&2
	fi

	apt-list-installed > "$w/installed.2"
	apt-list-manual    > "$w/manual.2"

	# disable "safety" due to "grep"
	set +e

	x="$w/installed.1"
	if ! [ -s "$x" ] ; then x="$w/installed.2" ; fi
	grep -Fxv -f "$w/installed.0" "$x" \
	> "$w/installed.diff"

	x="$w/manual.1"
	if ! [ -s "$x" ] ; then x="$w/manual.0" ; fi
	grep -Fxv -f "$x" "$w/manual.2" \
	> "$w/manual.diff"

	if [ -s "$w/manual.diff" ] ; then
		grep -Fxv -f "$w/manual.diff" "$w/installed.diff"
	else
		cat "$w/installed.diff"
	fi \
	> "$w/pkg.remove"

	set -e

	m="${APT_WRAP_REMOVE_METHOD:-purge}"
	case "$m" in
	purge|remove) ;;
	*)
		msg "warning: adjusting APT_WRAP_REMOVE_METHOD to 'purge'"
		m=purge
	;;
	esac

	r=1
	while : ; do
		xargs -r -a "$w/pkg.remove" \
		  ${_q} dpkg --force-all "--$m" >&2 \
		|| break

		unset APT_METHOD
		xargs -r -a "$w/keep" \
		  apt-install >/dev/null 2>&1 \
		|| ${_q} apt-install -f >&2 \
		|| break

		r=0 ; break
	done

	rm -rf "$w"
	exit $r
;;
esac

if [ $# = 0 ] ; then
	usage
	exit 0
fi

userspec=

want_value=
n_opt=0
for i ; do
	if [ -n "${want_value}" ] ; then
		if [ -z "$i" ] ; then
			msg "error: empty value for option"
			usage
			exit 1
		fi

		case "${want_value}" in
		userspec) userspec="$i" ;;
		esac

		want_value=
		n_opt=$((n_opt+1))
		continue
	fi

	case "$i" in
	--user=*)
		if [ -n "${userspec}" ] ; then
			msg "error: user specifier is already set"
			usage
			exit 1
		fi
		userspec="${i#*=}"
	;;
	-u|--user)
		if [ -n "${userspec}" ] ; then
			msg "error: user specifier is already set"
			usage
			exit 1
		fi
		want_value=userspec
	;;
	-*)
		msg "error: unknown option $i"
		usage
		exit 1
	;;
	*) break ;;
	esac

	n_opt=$((n_opt+1))
done

[ ${n_opt} = 0 ] || shift ${n_opt}

if [ $# -lt 2 ] ; then
	usage
	exit 1
fi

if [ -n "${userspec}" ] ; then
	if ! run-as "${userspec}" true >&2 ; then
		msg "error: user specifier is broken"
		usage
		exit 1
	fi
fi

deps="$1" ; shift
w=$("$0" --begin "${deps}") || exit

export APT_WRAP_KEEP="$w/keep"
export APT_WRAP_NEW="$w/new"

if [ -n "${userspec}" ] ; then
	g=$(run-as "${userspec}" id -g)
	chgrp "$g" "$w" "$w/new" "$w/keep"
	chmod g+rx "$w"
	chmod g+r  "$w/new"
	chmod g+rw "$w/keep"
fi

set +e
[ -n "${_q}" ] || echo >&2
${userspec:+ run-as "${userspec}" } "$@"
r=$?
[ -n "${_q}" ] || echo >&2

# early exit
if [ $r != 0 ] ; then
	: > "$w/keep"
	"$0" --end "$w"
	exit $r
fi

"$0" --end "$w" || r=$?
exit $r
