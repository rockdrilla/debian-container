#!/usr/bin/make -f

SHELL       :=/bin/sh
.SHELLFLAGS :=-ec

PYTHON_VERSION ?= 3.11.1
PYTHON_PIP_VERSION ?= 22.3.1
PYTHON_SETUPTOOLS_VERSION ?= 65.5.1

empty :=
space :=$(empty) $(empty)
comma :=,
xsedx :=$(shell printf '\027')

PYTHON_MAJOR_VERSION = $(word 1,$(subst .,$(space),$(PYTHON_VERSION)))
PYTHON_MINOR_VERSION = $(word 2,$(subst .,$(space),$(PYTHON_VERSION)))
PYTHON_PATCH_VERSION = $(word 3,$(subst .,$(space),$(PYTHON_VERSION)))

PYTHON_BASE_VERSION = $(PYTHON_MAJOR_VERSION).$(PYTHON_MINOR_VERSION)

DEB_PYTHON_PRIO = $(shell printf '%d%03d0' $(PYTHON_MAJOR_VERSION) $(PYTHON_MINOR_VERSION))

include debian/rules.pkg-info

MAKEFLAGS += --no-print-directory

export DH_VERBOSE := 1

include /usr/share/dpkg/default.mk

# Ubuntu mangles png files by default, which can break some files.
export NO_PNG_PKG_MANGLE := 1

# handles DATE and TIME in Modules/getbuildinfo.c
export SOURCE_DATE_EPOCH

ifneq ($(DEB_HOST_ARCH_OS),linux)
  $(warning unhandled operating system name: $(DEB_HOST_ARCH_OS))
endif

distribution = $(if $(filter Ubuntu,$(DEB_VENDOR) $(DEB_PARENT_VENDOR)),Ubuntu,Debian)
distrelease  = $(shell sed -En '/^VERSION_CODENAME=(.+)$$/s//\1/p' /etc/os-release)

with_dtrace := no

# applies only to Python 3.9+
with_pgo_full := $(if $(filter pgo_full,$(DEB_BUILD_OPTIONS)),yes,no)

arch_pgo := amd64 armel armhf arm64 i386 powerpc ppc64 ppc64el s390x
with_pgo := $(if $(findstring $(DEB_HOST_ARCH),$(arch_pgo)),yes)
with_pgo := $(if $(filter nopgo,$(DEB_BUILD_OPTIONS)),no,$(with_pgo))
with_pgo := $(if $(filter noopt,$(DEB_BUILD_OPTIONS)),no,$(with_pgo))

arch_lto := amd64 armel armhf arm64 i386 powerpc ppc64 ppc64el s390x
with_lto := $(if $(findstring $(DEB_HOST_ARCH),$(arch_lto)),yes)
with_lto := $(if $(filter nolto,$(DEB_BUILD_OPTIONS)),no,$(with_lto))
with_lto := $(if $(filter noopt,$(DEB_BUILD_OPTIONS)),no,$(with_lto))

ifeq ($(distribution),Ubuntu)
  # test_ssl assumes that openssl is compiled with security level set to 1
  # make it so, during the build
  export OPENSSL_CONF = $(CURDIR)/debian/tests/openssl.cnf
endif

# try to build with fresh gcc available
gcc_latest =$(strip $(shell apt-cache search '^gcc-[0-9.]+' | mawk '/^gcc-[0-9.]+ /{print $$1}' | sort -rV | head -n 1 | cut -d - -f 2))

CC     = $(DEB_HOST_GNU_TYPE)-gcc-$(gcc_latest)
CXX    = $(DEB_HOST_GNU_TYPE)-g++-$(gcc_latest)
AR     = $(DEB_HOST_GNU_TYPE)-gcc-ar-$(gcc_latest)
RANLIB = $(DEB_HOST_GNU_TYPE)-gcc-ranlib-$(gcc_latest)
export CC CXX AR RANLIB

DEB_BUILD_MAINT_OPTIMIZE = optimize=-lto

dpkg_buildflags = env \
  DEB_BUILD_MAINT_OPTIONS='hardening=+all,-stackprotectorstrong $(DEB_BUILD_MAINT_OPTIMIZE)' \
  dpkg-buildflags

# default is -O3
CFLAGS   = $(filter-out -O%,$(shell $(dpkg_buildflags) --get CFLAGS))
# default is -O3
CXXFLAGS = $(filter-out -O%,$(shell $(dpkg_buildflags) --get CXXFLAGS))
CPPFLAGS = $(shell $(dpkg_buildflags) --get CPPFLAGS)
LDFLAGS  = $(shell $(dpkg_buildflags) --get LDFLAGS)

ifeq ($(with_lto),yes)
  LTO_FLAGS = -O3 -g -fwrapv -flto=auto -ffat-lto-objects -fuse-linker-plugin

  ifneq (,$(filter lto_part=%,$(DEB_BUILD_OPTIONS)))
    LTO_FLAGS += -flto-partition=$(strip $(lastword $(patsubst lto_part=%,%,$(filter lto_part=%,$(DEB_BUILD_OPTIONS)))))
  endif

  CFLAGS   += $(LTO_FLAGS)
  CXXFLAGS += $(LTO_FLAGS)
  LDFLAGS  += $(LTO_FLAGS)
endif

export CFLAGS CPPFLAGS CXXFLAGS LDFLAGS

config_site = \
	ac_cv_file__dev_ptmx=yes \
	ac_cv_file__dev_ptc=yes \
	ac_cv_posix_semaphores_enabled=yes \


dtrace_build_dep =
ifeq ($(with_dtrace),yes)
dtrace_build_dep = systemtap-sdt-dev$(comma)
dtrace_conf = --with-dtrace
endif

# NB: "XX" in the beginning of list is MANDATORY
builtin_ext = XX \
 _abc _ast _bisect _blake2 _collections _csv _datetime _elementtree \
 _functools _heapq _locale _md5 _opcode _operator _pickle \
 _posixsubprocess _random _sha1 _sha3 _sha256 _sha512 _socket _stat \
 _stringio _struct _tracemalloc array atexit binascii cmath fcntl grp \
 itertools math pyexpat select spwd syslog time unicodedata zlib

builtin_ext__list =$(strip $(foreach ext,$(builtin_ext),$(ext)$(space)))
builtin_ext__re   =$(subst $(space),|,$(builtin_ext__list))

build_dir = $(CURDIR)/debian.build

PIP_CONF = $(word 1,$(wildcard debian/pip.conf.local) debian/pip.conf)

export PYTHONDONTWRITEBYTECODE = 1

# $1 = PYTHONHOME
# $2 = library subdirectory (may be empty)
x_python_LD_LIBRARY_PATH = $(1)$(if $(2),/$(2))$(if $(LD_LIBRARY_PATH),:$(LD_LIBRARY_PATH))

# $1 = PYTHONHOME
# $2 = library subdirectory (may be empty)
# $3 = path to binary
x_python = env \
	LD_LIBRARY_PATH='$(call x_python_LD_LIBRARY_PATH,$(strip $(1)),$(strip $(2)))' \
	PYTHONHOME='$(strip $(1))' \
	PYTHONUNBUFFERED=1 \
	SSL_CERT_FILE=/etc/ssl/certs/ca-certificates.crt \
	REQUESTS_CA_BUNDLE=/etc/ssl/certs/ca-certificates.crt \
	PIP_CONFIG_FILE='$(CURDIR)/$(PIP_CONF)' \
	DEB_PYTHON_INSTALL_LAYOUT=deb_system \
	fakeroot \
	$(strip $(1))/$(strip $(3))

# TEST_OPTS and TEST_EXCLUDES are defined here
include debian/rules.tests

# PROFILE_OPTS and PROFILE_EXCLUDES are defined here
include debian/rules.profile

ifneq (,$(wildcard debian/rules.local))
include debian/rules.local
endif

.NOTPARALLEL:

DH_ARGS = --buildsystem=autoconf

%:
	dh $@ $(DH_ARGS)

DH_ARGS_shared = $(DH_ARGS) --sourcedir=$(CURDIR) --builddir=$(build_dir)

override_dh_autoreconf:
	dh_autoreconf autoreconf -- -fiv -Werror

execute_before_dh_auto_configure:
	: # verify that we' having "right" gcc version
	@echo '# CC = $(CC)' >&2
	@$(CC) --version 2>&1 | head -n 1 >&2

	: # verify CFLAGS
	@echo "# CFLAGS = $${CFLAGS}" >&2

	: # verify DEB_BUILD_OPTIONS
	@echo "# DEB_BUILD_OPTIONS = $${DEB_BUILD_OPTIONS}" >&2

override_dh_auto_configure:
	OPT= \
	$(config_site) \
	dh_auto_configure $(DH_ARGS_shared) -- \
	  --enable-shared \
	  --enable-ipv6 \
	  --with-computed-gotos $(if $(filter yes,$(with_pgo)),--enable-optimizations) \
	  --with-system-expat \
	  --with-system-ffi $(dtrace_conf) \
	  --enable-loadable-sqlite-extensions \
	  --with-dbmliborder=bdb:gdbm \
	  --with-ssl-default-suites=openssl \
	  MKDIR_P="/bin/mkdir -p"

execute_after_dh_auto_configure:
	sed -En '/^#($(builtin_ext__re))/p' Modules/Setup \
	| sed -E 's/^#//;s/-Wl,-Bdynamic//;s/-Wl,-Bstatic//' \
	>> $(build_dir)/Modules/Setup.local

	: # unconditionally run makesetup
	cd $(build_dir) && \
	$(CURDIR)/Modules/makesetup \
	  -c $(CURDIR)/Modules/config.c.in \
	  -s Modules \
	  Modules/Setup.local Modules/Setup.bootstrap \
	  Modules/Setup.stdlib $(CURDIR)/Modules/Setup
	mv $(build_dir)/config.c $(build_dir)/Modules/

	: # and fix the timestamps
	$(MAKE) -C $(build_dir) Makefile Modules/config.c

override_dh_auto_build:
	sed -i -E \
		$(if $(filter yes,$(with_pgo_full)),-e '/^PROFILE_TASK[[:space:]]*=/s/--pgo/--pgo-extended/') \
		-e '/^PROFILE_TASK[[:space:]]*=/s$(xsedx)$$$(xsedx) $(PROFILE_OPTS)$(xsedx)' \
	$(build_dir)/Makefile
	dh_auto_build $(DH_ARGS_shared)

ifeq (,$(filter nocheck,$(DEB_BUILD_OPTIONS)))

test_python = $(call x_python, $(build_dir) , , python )

execute_before_dh_auto_test:
	: # check that things are correctly built
  ifneq (,$(filter $(DEB_HOST_ARCH_OS),linux))
	$(test_python) -c 'from _multiprocessing import SemLock'
  endif
	$(test_python) -c 'import _decimal'
	$(test_python) -c 'import math, cmath'

override_dh_auto_test:
	dh_auto_test $(DH_ARGS_shared) -- TESTOPTS="$(TEST_OPTS)"

else

# ensure that dh_auto_test isn't called in any case
override_dh_auto_test:

endif

override_dh_auto_install:
	dh_auto_install $(DH_ARGS_shared)

execute_after_dh_auto_install:
	: # remove manpages
	rm -rf debian/tmp/usr/share/man/

	: # remove Python cache
	find debian/tmp/ -name __pycache__ -type d -exec rm -rf '{}' '+'
	find debian/tmp/ -name '*.py[co]' -ls -delete

	: # move /usr/local/* -> /usr/*
	tar -C debian/tmp/usr/local -cf - . | tar -C debian/tmp/usr/ -xf -
	rm -rf debian/tmp/usr/local

	: # remove builtin testsuite
	find debian/tmp/ -path '*/lib/python$(PYTHON_BASE_VERSION)/*/test' -type d -exec rm -rf '{}' '+'
	find debian/tmp/ -path '*/lib/python$(PYTHON_BASE_VERSION)/*/tests' -type d -exec rm -rf '{}' '+'

	: # preserve only small part of /lib/python$(PYTHON_BASE_VERSION)/test/
	find debian/tmp/ -path '*/lib/python$(PYTHON_BASE_VERSION)/test' -type d \
	| while read -r d ; do \
		rm -f debian/test.tar ; \
		find "$$d" -regextype egrep \
		  -regex '.+/test/(libregrtest|support|(__.+|ann_module.*|regrtest|test_support)\.py)$$' \
		  -exec tar -cf debian/test.tar '{}' '+' ; \
		rm -rf "$$d" ; \
		tar -xf debian/test.tar ; \
		rm -f debian/test.tar ; \
	done

	: # remove non-fully versioned symlinks
	find debian/tmp/ -path '*/bin/*' -type l -exec rm -vf '{}' '+'
	find debian/tmp/ -path '*/lib/$(DEB_HOST_MULTIARCH)/pkgconfig/*' -type l -exec rm -vf '{}' '+'

	: # minor file name mangling
	cd debian/tmp/usr/bin ; \
	mv python$(PYTHON_BASE_VERSION)-config $(DEB_HOST_MULTIARCH)-python$(PYTHON_BASE_VERSION)-config

PY_INTERPRETER =/usr/bin/python$(PYTHON_BASE_VERSION)

define fix_hashbangs_r

	hashbang_rx='#!.*[/ ]python[^ ]*' ; \
	list='$(strip $(1)).hashbang' ; \
	find '$(strip $(1))/' -type f -exec grep -EIl "$${hashbang_rx}" '{}' '+' \
	> "$${list}" || : ; \
	if [ -s "$${list}" ] ; then \
		while read -r f ; do \
			[ -n "$$f" ] || continue ; \
			x_flag=1 ; \
			[ -x "$$f" ] || x_flag= ; \
			sed -E "1s$(xsedx)$${hashbang_rx}$(xsedx)#!$(PY_INTERPRETER)$(xsedx)" \
			< "$$f" > "$${list}.tmp" ; \
			if ! cmp -s "$${list}.tmp" "$$f" ; then \
				echo "# fixed hashbang: $$f" ; \
				mv -f "$${list}.tmp" "$$f" ; \
			fi ; \
			if [ -z "$${x_flag}" ] ; then \
				echo "# fixed permissions: $$f" ; \
			fi ; \
			chmod 0755 "$$f" ; \
		done < "$${list}" >&2 ; \
		rm -f "$${list}.tmp" ; \
	fi ; \
	rm -f "$${list}"

endef

replace_string = -e "s/ $(1) / $(2) /g;s/ $(1)/ $(2)/g;s/$(1) /$(2) /g;s/$(1)/$(2)/g"
remove_string  = -e "s/ $(1) / $(2)/g;s/ $(1)/ $(2)/g;s/$(1) /$(2) /g;s/$(1)/$(2)/g"
replace_prefixed = $(call replace_string,$(1)[^[:space:]\"']*,$(2))
remove_prefixed  = $(call replace_prefixed,$(1)[^[:space:]\"']*,)

fake_srcdir =/usr/local/src/python/$(DEB_VERSION_UPSTREAM)

define buildrepro_backup

	mkdir -p $(shell printf '%s' '$(dir $(strip $(1)))' | sed -zE 's,^debian/[^/]+/,debian/dist.orig/,')

	cp $(strip $(1)) $(shell printf '%s' '$(strip $(1))' | sed -zE 's,^debian/[^/]+/,debian/dist.orig/,')

endef

# TODO: re-sync periodically with "sysconfig_substflags" in Debian
define buildrepro_fix

	sed -i \
		-e 's|$(CC)|$(DEB_HOST_GNU_TYPE)-gcc|g' \
		-e 's|$(CC)|$(DEB_HOST_GNU_TYPE)-gcc|g' \
		-e 's|$(CXX)|$(DEB_HOST_GNU_TYPE)-g++|g' \
		-e 's|$(AR)|$(DEB_HOST_GNU_TYPE)-gcc-ar|g' \
		-e 's|$(RANLIB)|$(DEB_HOST_GNU_TYPE)-gcc-ranlib|g' \
	$(strip $(1))

	sed -i -E \
		$(call remove_prefixed,LD_LIBRARY_PATH=) \
		$(call remove_prefixed,-f(debug|file|macro|profile)-prefix-map=) \
		$(call remove_prefixed,-flto) \
		$(call remove_string,-ffat-lto-objects) \
		$(call remove_string,-fuse-linker-plugin) \
		$(call remove_prefixed,-fprofile) \
		$(call replace_prefixed,-fstack-protector,-fstack-protector-strong) \
		$(call replace_string,-fstack-protector-strong-strong,-fstack-protector-strong) \
		$(call remove_prefixed,--param=ssp-buffer-size=) \
		$(call remove_prefixed,-specs=) \
		$(call remove_string,-Wl$(comma)-z$(comma)now) \
		$(call remove_string,-L\.) \
		$(call replace_string,-O3,-O2) \
		$(call replace_string,-Wl$(comma)-z$(comma)relro +-Wl$(comma)-z$(comma)relro,-Wl$(comma)-z$(comma)relro) \
		-e 's/^RUNSHARED\s*=.*$$/RUNSHARED=/g' \
	$(strip $(1))

 	sed -i \
 		-e 's|$(build_dir)/..|$(fake_srcdir)|g' \
 		-e 's|$(CURDIR)|$(fake_srcdir)|g' \
 	$(strip $(1))

endef

define buildrepro_compare

	mkdir -p $(shell printf '%s' '$(dir $(strip $(1)))' | sed -zE 's,^debian/[^/]+/,debian/dist/,')

	cp $(strip $(1)) $(shell printf '%s' '$(strip $(1))' | sed -zE 's,^debian/[^/]+/,debian/dist/,')

	set +e ; diff -Naru --color \
	$(shell printf '%s' '$(strip $(1))' | sed -zE 's,^debian/[^/]+/,debian/dist.orig/,') \
	$(shell printf '%s' '$(strip $(1))' | sed -zE 's,^debian/[^/]+/,debian/dist/,') \
	|| :

endef

# "aio" stands for "all-in-one"
define buildrepro_aio

	$(call buildrepro_backup,$(strip $(1)))

	$(call buildrepro_fix,$(strip $(1)))

	$(call buildrepro_compare,$(strip $(1)))

endef

limb_python = $(call x_python, $(CURDIR)/debian/tmp/usr , lib/$(DEB_HOST_MULTIARCH) , bin/python$(PYTHON_BASE_VERSION) )

execute_before_dh_install:
	chmod +x debian/thin-ci.sh

	mkdir -p debian/tmp/usr/share/python$(PYTHON_BASE_VERSION)
	cp $(PIP_CONF) debian/tmp/usr/share/python$(PYTHON_BASE_VERSION)/pip.conf

	$(call fix_hashbangs_r, debian/tmp )

	$(call buildrepro_aio, debian/tmp/usr/bin/$(DEB_HOST_MULTIARCH)-python$(PYTHON_BASE_VERSION)-config )
	$(call buildrepro_aio, debian/tmp/usr/lib/python$(PYTHON_BASE_VERSION)/config-$(PYTHON_BASE_VERSION)-$(DEB_HOST_MULTIARCH)/config.c )
	$(call buildrepro_aio, debian/tmp/usr/lib/python$(PYTHON_BASE_VERSION)/config-$(PYTHON_BASE_VERSION)-$(DEB_HOST_MULTIARCH)/Makefile )

	$(call buildrepro_backup, debian/tmp/usr/lib/python$(PYTHON_BASE_VERSION)/_sysconfigdata__$(DEB_HOST_MULTIARCH).py )

	: # adjust sysconfigdata
	cat \
		debian/regen-sysconfigdata.py.pre \
		debian/tmp/usr/lib/python$(PYTHON_BASE_VERSION)/_sysconfigdata__$(DEB_HOST_MULTIARCH).py \
		debian/regen-sysconfigdata.py.post \
	> debian/tmp/regen-sysconfigdata.py
	$(limb_python) debian/tmp/regen-sysconfigdata.py \
	  debian/tmp/usr/lib/python$(PYTHON_BASE_VERSION)/_sysconfigdata__$(DEB_HOST_MULTIARCH).py
	rm -f debian/tmp/regen-sysconfigdata.py

	$(call buildrepro_fix, debian/tmp/usr/lib/python$(PYTHON_BASE_VERSION)/_sysconfigdata__$(DEB_HOST_MULTIARCH).py )
	sed -i -E \
		-e 's/  +/ /g' \
	debian/tmp/usr/lib/python$(PYTHON_BASE_VERSION)/_sysconfigdata__$(DEB_HOST_MULTIARCH).py
	$(call buildrepro_compare, debian/tmp/usr/lib/python$(PYTHON_BASE_VERSION)/_sysconfigdata__$(DEB_HOST_MULTIARCH).py )

include debian/rules.install

override_dh_install:
	$(call dh_install_move, container-python-$(PYTHON_BASE_VERSION)-misc )

	$(call dh_install_move, container-python-$(PYTHON_BASE_VERSION)-dev )

	: # we're have "clean" Python at this point, but we need to get pip working,
	: # so using standard "dh_install" instead of our "dh_install_move"
	dh_install -pcontainer-python-$(PYTHON_BASE_VERSION)
	: # these directories go to container-python-$(PYTHON_BASE_VERSION)-full
	cd debian/container-python-$(PYTHON_BASE_VERSION)/usr/lib/python$(PYTHON_BASE_VERSION) ; \
	rm -rf ensurepip lib2to3 dist-packages

	: # UNUSED: install pip and setuptools via preseeded debian/get-pip.py
	: $(limb_python) debian/get-pip.py \
	  --disable-pip-version-check --no-cache-dir --no-warn-script-location --no-compile \
	  'pip==$(PYTHON_PIP_VERSION)' \
	  'setuptools==$(PYTHON_SETUPTOOLS_VERSION)' \
	;

	: # list installed packages
	$(limb_python) -m pip \
	  --disable-pip-version-check --no-cache-dir \
	  list --format json \
	> debian/tmp/pip.json

	: # upgrade installed packages
	$(limb_python) -m pip \
	  --disable-pip-version-check --no-cache-dir \
	  install --upgrade \
	  $$(jq -r '.[].name' < debian/tmp/pip.json)

	: # install wheel
	$(limb_python) -m pip \
	  --disable-pip-version-check --no-cache-dir \
	  install wheel

	: # list installed packages (refreshing version info)
	$(limb_python) -m pip \
	  --disable-pip-version-check --no-cache-dir \
	  list --format json \
	> debian/tmp/pip.json

	: # produce list of individual installed packages
	jq -r '.[] | "pip:version:" + .name + "=" + .version' \
	< debian/tmp/pip.json \
	>> debian/pip.substvars

	: # produce "auto" list of installed packages
	jq -r '.[] | "python$(PYTHON_MAJOR_VERSION)-" + .name + " (=" + .version + ")"' \
	< debian/tmp/pip.json \
	| paste -sd',' | sed -E 's/^/pip:autolist=/' \
	>> debian/pip.substvars

	rm -f debian/tmp/pip.json

	: # move non-native platform files to container-python-$(PYTHON_BASE_VERSION)-misc
	find debian/tmp/ -iname '*.exe' -printf '%P\0' \
	| tar -C debian/tmp --null -T - -cf - \
	| tar -C debian/container-python-$(PYTHON_BASE_VERSION)-misc -xf -
	find debian/tmp/ -iname '*.exe' -delete

	: # remove Python cache
	find debian/tmp/ -name __pycache__ -type d -exec rm -rf '{}' '+'
	find debian/tmp/ -name '*.py[co]' -ls -delete

	: # remove already installed files from container-python-$(PYTHON_BASE_VERSION)
	$(call dh_dedup, container-python-$(PYTHON_BASE_VERSION) )

	: # minor file name mangling and cleanup
	cd debian/tmp/usr/bin ; \
	mv wheel wheel$(PYTHON_BASE_VERSION) ; \
	rm -f pip pip3

	: # install remaining packages
	dh_install -pthin-ci-container-python-$(PYTHON_BASE_VERSION)
	$(call dh_install_move, container-python-$(PYTHON_BASE_VERSION)-full )

	: # fix hashbangs in scripts and change permissions on them
	$(foreach p, $(shell dh_listpackages), $(call fix_hashbangs_r, debian/$(p)) )

# if there're files left - dh_missing will do the job (raise error)

override_dh_strip_nondeterminism:
	dh_strip_nondeterminism $(addprefix --exclude=, .exe .png .whl )

override_dh_dwz:
	dh_dwz $(addprefix --exclude=, .exe libpython$(PYTHON_MAJOR_VERSION).so libpython$(PYTHON_BASE_VERSION).a )

override_dh_strip:
	dh_strip $(addprefix --exclude=, .exe libpython$(PYTHON_MAJOR_VERSION).so libpython$(PYTHON_BASE_VERSION).a )

override_dh_gencontrol:
	dh_gencontrol -- -Tdebian/pip.substvars -Tdebian/substvars

# sync with execute_before_dh_install
execute_before_dh_builddeb:
	set +e ; \
	find $(foreach p, $(shell dh_listpackages), debian/$(p)/ ) -type f \
	  -exec grep -aFl -e '$(CURDIR)' '{}' '+' \
	| sort -V > debian/build.reproducible ; \
	if [ -s debian/build.reproducible ] ; then \
		echo ; \
		echo '# detected build path leakage in files:' ; \
		echo ; \
		cat debian/build.reproducible ; \
		echo ; \
	fi >&2 ; \
	find $(foreach p, $(shell dh_listpackages), debian/$(p)/ ) -type f \
	  -exec grep -aEl -e '(LD_LIBRARY|LD_PRELOAD|fakeroot|eatmydata|f(debug|file|macro|profile)-prefix-map|flto|ffat-lto|fuse-linker-plugin|fprofile|param=ssp-buffer-size=4|specs=|Wl,-z,now)' '{}' '+' \
	| sort -V > debian/build.reproducible ; \
	if [ -s debian/build.reproducible ] ; then \
		echo ; \
		echo '# detected (possible) build env leakage in files:' ; \
		echo ; \
		cat debian/build.reproducible ; \
		echo ; \
	fi >&2 ; \
	rm -f debian/build.reproducible

include debian/rules.selftemplate
