#!/usr/bin/make -f

SHELL       :=/bin/sh
.SHELLFLAGS :=-ec

MAKEFLAGS += --no-print-directory

export DH_VERBOSE := 1

include /usr/share/dpkg/default.mk

include debian/rules.common-defs

export DEB_BUILD_MAINT_OPTIONS := hardening=+all,-stackprotectorstrong optimize=-lto
export DEB_BUILD_PATH := $(CURDIR)

# Ubuntu mangles png files by default, which can break some files.
export NO_PNG_PKG_MANGLE := 1

export SOURCE_DATE_EPOCH

include debian/rules.pkg-info

GOLANG_VERSION ?= $(DEB_VERSION_UPSTREAM)

GOLANG_MAJOR_VERSION = $(word 1,$(subst .,$(space),$(GOLANG_VERSION)))
GOLANG_MINOR_VERSION = $(word 2,$(subst .,$(space),$(GOLANG_VERSION)))
GOLANG_BASE_VERSION = $(GOLANG_MAJOR_VERSION).$(GOLANG_MINOR_VERSION)

DEB_GOLANG_PRIO = $(shell printf '1%02d%03d0' $(GOLANG_MAJOR_VERSION) $(GOLANG_MINOR_VERSION))

GOLANG_PREFIX = opt/golang-$(GOLANG_BASE_VERSION)

NPROC_MAKE := $(patsubst parallel=%,%,$(filter parallel=%,$(DEB_BUILD_OPTIONS)))
NPROC_MAKE := $(if $(NPROC_MAKE),$(NPROC_MAKE),$(shell nproc))
NPROC_TEST := $(shell echo "$$(( ($(NPROC_MAKE) + 1)/2 ))")

with_bootstrap :=$(if $(filter nobootstrap,$(DEB_BUILD_OPTIONS)),no,yes)

include debian/rules.gcc-flags

export GOROOT_FINAL := /$(GOLANG_PREFIX)

export CGO_ENABLED := 0

# try to build with fresh golang available
golang_debian_latest =$(strip $(shell apt-cache search 'golang-' | mawk '/^golang-[0-9.]+ /{print $$1}' | sort -rV | head -n 1))
golang_k2_latest =$(shell apt-cache search 'k2-golang-' | mawk '/^k2-golang-[0-9.]+-full /{print $$1}' | sort -rV | head -n 1 | sed -En 's/^(.+)$$/\1 | /p')

GO = $(word 1,$(wildcard /opt/golang-*/bin/go) $(wildcard /usr/lib/go-*/bin/go))

# keep in sync with patches/proxyenv.patch
GOPROXY :=$(if $(GOPROXY),$(GOPROXY),https://proxy.golang.org$(comma)direct)
GOSUMDB :=$(if $(GOSUMDB),$(GOSUMDB),sum.golang.org)

GOPROXY_BUILD :=$(if $(GOPROXY_BUILD),$(GOPROXY_BUILD),$(GOPROXY))
GOSUMDB_BUILD :=$(if $(GOSUMDB_BUILD),$(GOSUMDB_BUILD),$(GOSUMDB))

cleansrc_tar = debian/cleansrc.tar.gz
bootstrap_dir = debian/bootstrap

export GOROOT  := $(CURDIR)
export GOPATH  := $(CURDIR)/debian/gopath
export GOCACHE := $(CURDIR)/debian/gocache

# make tests happy
export SCHROOT_SESSION_ID ?= 1

ifneq (,$(wildcard debian/rules.local))
include debian/rules.local
endif

.NOTPARALLEL:

DH_ARGS =

%:
	dh $@ $(DH_ARGS)

execute_before_dh_auto_configure:
	: # applies to Go versions before 1.21
	sed -i \
	  -e 's$(xsedx)@{GOPROXY}$(xsedx)$(GOPROXY)$(xsedx)g' \
	  -e 's$(xsedx)@{GOSUMDB}$(xsedx)$(GOSUMDB)$(xsedx)g' \
	  -e 's$(xsedx)@{GOPRIVATE}$(xsedx)$(GOPRIVATE)$(xsedx)g' \
	src/cmd/go/internal/cfg/cfg.go

	: # applies to Go versions starting 1.21
	{ \
	echo 'GOTOOLCHAIN=local' ; \
	echo 'GOPROXY=$(GOPROXY)' ; \
	echo 'GOSUMDB=$(GOSUMDB)' ; \
	} > go.env
ifneq ($(GOPRIVATE),)
	echo 'GOPRIVATE=$(GOPRIVATE)' >> go.env
endif

override_dh_auto_configure:
	: # early grab arch-independent files to k2-golang-$(GOLANG_BASE_VERSION)-src
	rm -f $(cleansrc_tar) ; \
	tar -cf - api misc src test | gzip -f8 > $(cleansrc_tar)

execute_before_dh_auto_build:
	: # verify that we' having "right" go version
	$(GO) version 2>&1 | head -n 1 >&2
	$(GO) env GOROOT

	: # verify DEB_BUILD_OPTIONS
	@echo "# DEB_BUILD_OPTIONS = $${DEB_BUILD_OPTIONS}" >&2

deb_cgo_flags = export $(foreach f,ASFLAGS CFLAGS CPPFLAGS CXXFLAGS LDFLAGS,CGO_$(f)="$${$(f)}")

override_dh_auto_build:
	: # ensure caches are empty
	rm -rf $(GOPATH) $(GOCACHE) ; \
	mkdir -p $(GOPATH) $(GOCACHE)

ifeq ($(with_bootstrap),yes)

	: # prepare bootstrap directory
	rm -rf $(bootstrap_dir) ; mkdir -p $(bootstrap_dir)

	find $(CURDIR) -mindepth 1 -maxdepth 1 -printf '%P\0' \
	| grep -zEv '^(\.pc|debian)$$' | sort -zu \
	| xargs -0r cp -t $(bootstrap_dir) -alP

	: # build bootstrap version
	unset CGO_ENABLED ; \
	$(call deb_cgo_flags) ; \
	export DEB_BUILD_MAINT_OPTIONS='hardening=-all optimize=-lto' ; \
	export DEB_BUILD_PATH=$(CURDIR)/$(bootstrap_dir) ; \
	unset GOROOT_FINAL ; \
	export GOROOT=$(CURDIR)/$(bootstrap_dir) ; \
	export GOROOT_BOOTSTRAP=$$(env -u GOROOT $(GO) env GOROOT) ; \
	export GOPROXY='$(GOPROXY_BUILD)' ; \
	export GOSUMDB='$(GOSUMDB_BUILD)' ; \
	cd $(bootstrap_dir) ; \
	cd src ; \
	bash ./make.bash --no-banner

	: # ensure caches are empty
	rm -rf $(GOPATH) $(GOCACHE) ; \
	mkdir -p $(GOPATH) $(GOCACHE)

	: # build final version
	export GOROOT_BOOTSTRAP=$(CURDIR)/$(bootstrap_dir) ; \
	export GOPROXY='$(GOPROXY_BUILD)' ; \
	export GOSUMDB='$(GOSUMDB_BUILD)' ; \
	cd src ; \
	bash ./make.bash --no-banner

	: # remove bootstrap directory
	rm -rf $(bootstrap_dir)

else

	: # build final version
	export GOROOT_BOOTSTRAP=$$(env -u GOROOT $(GO) env GOROOT) ; \
	export GOPROXY='$(GOPROXY_BUILD)' ; \
	export GOSUMDB='$(GOSUMDB_BUILD)' ; \
	cd src ; \
	bash ./make.bash --no-banner

endif

	: # build race detection lib (if applicable)
	export PATH="$(GOROOT)/bin:$$PATH" ; \
	export CGO_ENABLED=1 ; \
	$(call deb_cgo_flags) ; \
	go install -race std || :

override_dh_auto_test:
	export NPROC=$(NPROC_TEST) ; \
	export GOMAXPROCS=$(NPROC_TEST) ; \
	export GO_TEST_TIMEOUT_SCALE=10 ; \
	export PATH="$(GOROOT)/bin:$$PATH" ; \
	cd src ; \
	eval "$$(go tool dist env)" ; \
	bash ./run.bash -k -no-rebuild || :

override_dh_auto_install:

execute_before_dh_install:
	rm -rf pkg/obj

	chmod +x debian/thin-ci.sh

	: # ensure caches are empty
	rm -rf $(GOPATH) $(GOCACHE)

include debian/rules.install-extras

pkg_src = debian/k2-golang-$(GOLANG_BASE_VERSION)-src/$(GOLANG_PREFIX)
pkg_misc = debian/k2-golang-$(GOLANG_BASE_VERSION)-misc/$(GOLANG_PREFIX)
pkg_base = debian/k2-golang-$(GOLANG_BASE_VERSION)/$(GOLANG_PREFIX)

override_dh_install:
	dh_install -pk2-thin-ci-golang-$(GOLANG_BASE_VERSION)

	mkdir -p $(pkg_src)
	tar -C $(pkg_src) -xf $(cleansrc_tar)
	rm -f $(cleansrc_tar)
	$(call dh_dedup_ex, $(pkg_src) , . )

	mkdir -p $(pkg_misc)
	s=$$(ls -1d lib pkg/*_race ) || true ; \
	[ -n "$$s" ] || exit 0 ; \
	tar -cf - $$s | tar -C $(pkg_misc) -xf - ; \
	rm -rf $$s

	mkdir -p $(pkg_base)
	s=$$(ls -1d VERSION bin pkg/include pkg/tool src go.env pkg/*_* ) || true ; \
	[ -n "$$s" ] || exit 0 ; \
	tar -cf - $$s | tar -C $(pkg_base) -xf - ; \
	rm -rf $$s

override_dh_strip_nondeterminism:
	dh_strip_nondeterminism $(addprefix --exclude=,.png testdata)

execute_after_dh_fixperms:
	find $(pkg_src)/ -regextype egrep -regex '.+\.(sh|bash)$$' -type f -exec chmod a+x '{}' '+'

# don't run dwz - still buggy
override_dh_dwz:

override_dh_strip:
	dh_strip $(addprefix --exclude=,testdata)

override_dh_makeshlibs:
	dh_makeshlibs $(addprefix --exclude=,testdata test)

override_dh_shlibdeps:
	dh_shlibdeps $(addprefix --exclude=,testdata test)

include debian/rules.build-reproducible-info
execute_before_dh_builddeb:
	$(call deb_build_reproducible_info)

# -- package templating - here goes dragons! --

_deb_control_templates = $(wildcard debian/*GOVER*)
_deb_rename =$(subst GOVER,$(GOLANG_BASE_VERSION),$(strip $(1)))

include debian/rules.self-template
