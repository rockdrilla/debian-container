#!/bin/sh
# SPDX-License-Identifier: Apache-2.0
# (c) 2022-2023, Konstantin Demin

set -ef

_printf() { env printf "$@" ; }
_msg() {  _printf "${0##*/}: ${__PRINTF_FMT}\n" "$@" >&2 ; }

msg() {
	export __PRINTF_FMT="$1" ; shift
	_msg "$@"
	unset __PRINTF_FMT
}

if ! command -v setpriv >/dev/null ; then
	msg "\`setpriv' is missing, unable to switch user!"
	exit 126
fi

is_id() { printf '%s' "$1" | grep -Eqz '^(0|[1-9][0-9]*)$' ; }

etcfile_has() {
	grep -Fxq "$2" <<-EOF
	$(cut -d : -f "$1" "$3")
	EOF
}

etcfile_get() {
	unset __n
	while read -r __n ; do
		[ -n "${__n}" ] || continue
		mawk -F : "NR==${__n} { print \$$3; }" "$4"
	done <<-EOF
	$(cut -d : -f "$1" "$4" | grep -Fxn "$2" | cut -d : -f 1)
	EOF
	unset __n
}

etc_passwd_has() { etcfile_has "$1" "$2" /etc/passwd ; }
etc_passwd_get() { etcfile_get "$1" "$2" "$3" /etc/passwd ; }
etc_group_has()  { etcfile_has "$1" "$2" /etc/group ; }
etc_group_get()  { etcfile_get "$1" "$2" "$3" /etc/group ; }

has_user()  { etc_passwd_has 1 "$1" ; }
has_uid()   { etc_passwd_has 3 "$1" ; }
has_group() { etc_group_has 1 "$1" ; }
has_gid()   { etc_group_has 3 "$1" ; }

get_name_by_uid()  { etc_passwd_get 3 "$1" 1 ; }
get_gid_by_user()  { etc_passwd_get 1 "$1" 4 ; }
get_home_by_user() { etc_passwd_get 1 "$1" 6 ; }

unset user_group_spec ; user_group_spec="${1:?}" ; shift

unset user group xtra
# user[:group]
IFS=':' read -r user group xtra <<-EOF
${user_group_spec}
EOF

if [ -z "${user}" ] ; then
	msg "'user:group' spec error: 'user' expected but empty."
	msg "report this bug to developer ASAP."
	exit 1
fi

if [ -n "${xtra}" ] ; then
	msg "'user:group' spec warning: extra data: %q" "${xtra}"
fi

_has_user=1
if has_user "${user}" ; then
	# do nothing - seems to be ok
	:
elif has_uid "${user}" ; then
	# use name instead of uid
	user=$(get_name_by_uid "${user}")
elif is_id "${user}" ; then
	# accept unknown/random uid
	_has_user=0
else
	msg "'user:group' spec error: 'user' is malformed - not exist nor numeric."
	exit 1
fi

if [ -z "${group}" ] ; then
	if [ ${_has_user} = 1 ] ; then
		_group=$(get_gid_by_user "${user}")
	else
		_group=nogroup
	fi
else
	if has_group "${group}" || has_gid "${group}" || is_id "${group}" ; then
		# do nothing - seems to be ok
		:
	else
		msg "'user:group' spec error: 'group' is malformed - not exist nor numeric."
		exit 1
	fi
fi

# handle username and working directory
username='__non_existent_user__'
init_groups='--clear-groups'
homedir='/'
if [ ${_has_user} = 1 ] ; then
	username="${user}"
	init_groups='--init-groups'
	homedir=$(get_home_by_user "${user}")
fi

inh_caps=

unset __exec__
_runas() {
	${__exec__:+ exec env -u __exec__ } \
	setpriv \
	  --reuid="${user}" \
	  --regid="${group}" \
	  ${init_groups} \
	  ${inh_caps} \
	env \
	  -C "${cwd}" \
	  USER="${username}" \
	  LOGNAME="${username}" \
	  HOME="${homedir}" \
	  SHELL=/bin/sh \
	"$@"
}

# Ubuntu 20.04 "Focal":
# setpriv: libcap-ng is too old for "all" caps
inh_caps='--inh-caps=-all'
cwd=/
if ! _runas id >/dev/null 2>&1 ; then
	inh_caps=
fi

cwd=
for i in "${PWD}" "${homedir}" / ; do
	[ -d "$i" ] || continue

	cwd=/
	if _runas test -r "$i" ; then
		if [ "$i" != "${PWD}" ] ; then
			msg "working directory: will be changed to %q" "$i"
		fi

		cwd="$i"
		break
	else
		msg "working directory: warning: user %q can't access %q" "${user}" "$i"
	fi
	cwd=
done

if [ -z "${cwd}" ] ; then
	msg "working directory: error: unable to find appropriate location."
	exit 1
fi


if [ $# = 0 ] ; then
	__exec__=1 _runas id
fi
__exec__=1 _runas "$@"
