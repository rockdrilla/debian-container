#!/usr/bin/make -f

SHELL       :=/bin/sh
.SHELLFLAGS :=-ec

MAKEFLAGS += --no-print-directory

export DH_VERBOSE := 1

include /usr/share/dpkg/default.mk

include debian/rules.common-defs
include debian/rules.remove-pycache
include debian/rules.fix-hashbang

export DEB_BUILD_MAINT_OPTIONS := hardening=+all,-pie,-stackprotectorstrong
export DEB_BUILD_PATH := $(CURDIR)/debian/build

# Ubuntu mangles png files by default, which can break some files.
export NO_PNG_PKG_MANGLE := 1

export SOURCE_DATE_EPOCH

include debian/rules.pkg-info

NODEJS_VERSION ?= $(DEB_VERSION_UPSTREAM)

NODEJS_MAJOR_VERSION = $(word 1,$(subst .,$(space),$(NODEJS_VERSION)))

DEB_NODEJS_PRIO = $(shell printf '1%03d0' $(NODEJS_MAJOR_VERSION))

NODEJS_BINARY = usr/bin/node-$(NODEJS_MAJOR_VERSION)
NODEJS_PREFIX = opt/node-$(NODEJS_MAJOR_VERSION)
NODEJS_LIBDIR = $(NODEJS_PREFIX)/lib
NODEJS_MODULES = $(NODEJS_LIBDIR)/node_modules

NODEJS_HASHBANG_RX = .*[/ ]node(js|)
NODEJS_HASHBANG = /$(NODEJS_BINARY)

NPROC_MAKE := $(patsubst parallel=%,%,$(filter parallel=%,$(DEB_BUILD_OPTIONS)))
NPROC_MAKE := $(if $(NPROC_MAKE),$(NPROC_MAKE),$(shell nproc))
NPROC_TEST := $(shell echo "$$(( ( $(NPROC_MAKE) + 1 ) / 2 ))")

include debian/rules.ver

NPM_MAJOR_VERSION = $(word 1,$(subst .,$(space),$(NPM_VERSION)))
YARN_MAJOR_VERSION = $(word 1,$(subst .,$(space),$(YARN_VERSION)))

include debian/rules.gcc-latest-ver
include debian/rules.gcc-flags
include debian/rules.gcc-lto
# TODO: PGO/benchmark is broken AF
# include debian/rules.gcc-pgo

# strip "-O2" default optimization flag:
# use "-O3" as upstream default or "-O1" for "noopt" builds
CFLAGS   := $(filter-out -O2,$(CFLAGS))
CXXFLAGS := $(filter-out -O2,$(CXXFLAGS))
LDFLAGS  := $(filter-out -O2,$(LDFLAGS))

include debian/rules.icu
include debian/rules.libc-ares
include debian/rules.libuv
include debian/rules.nghttp2

corepack_available = $(if $(wildcard deps/corepack),yes)

CONFIGURE_FLAGS = \
	--prefix=/$(NODEJS_PREFIX) \
	--arch-triplet=$(DEB_HOST_MULTIARCH) \
	--shebang=$(NODEJS_HASHBANG) \
	--verbose \
	--without-npm \
	$(if $(corepack_available),--without-corepack) \
	--shared-openssl \
	--openssl-use-def-ca-store \
	--shared-zlib \
	--shared-brotli \
	$(if $(system_icu),--with-intl=system-icu) \
	$(if $(system_libc_ares),--shared-cares) \
	$(if $(system_libuv),--shared-libuv) \
	$(if $(system_nghttp2),--shared-nghttp2) \
	$(if $(filter yes,$(with_lto)),--enable-lto)

export NPM_CONFIG_GLOBALCONFIG = $(word 1,$(wildcard /etc/npmrc) $(CURDIR)/debian/npmrc)
export YARN_CONFIG = $(word 1,$(wildcard /etc/yarnrc) $(CURDIR)/debian/yarnrc)

# needed for tests to avoid "ee key too small" errors
export OPENSSL_CONF = $(CURDIR)/deps/openssl/openssl/apps/openssl.cnf

export PYTHON = python3
export PYTHONUNBUFFERED = 1
export PYTHONDONTWRITEBYTECODE = 1

# $1 = NODE_HOME
# $2 = path to binary
# $3 - wrapper cmd
x_nodejs = env \
	NODE_HOME=$(strip $(1)) \
	PATH=$(dir $(strip $(1))/$(strip $(2))):$(PATH) \
	$(strip $(3)) $(strip $(1))/$(strip $(2))

test_nodejs = $(call x_nodejs, $(1) , out/Release/node , env -u NODE_HOME )

ifneq (,$(wildcard debian/rules.local))
include debian/rules.local
endif

.NOTPARALLEL:

DH_ARGS =

%:
	dh $@ $(DH_ARGS)

override_dh_auto_configure:
	: # verify that we' having "right" gcc version
	@echo '# CC = $(CC)' >&2
	@$(CC) --version 2>&1 | head -n 1 >&2

	: # verify CFLAGS
	@echo "# CFLAGS = $${CFLAGS}" >&2

	: # verify DEB_BUILD_OPTIONS
	@echo "# DEB_BUILD_OPTIONS = $${DEB_BUILD_OPTIONS}" >&2

	: # collect extra package versions for dh_gencontrol
	for i in types npm yarn ; do \
	    jq -r "\"jspkg:$$i=\" + .version" node-$$i/package.json ; \
	done | tee debian/jspkg.substvars

	: # node-npm-src: apply patches
	cd node-npm-src ; \
	find $(CURDIR)/debian/patches/npm-$(NPM_MAJOR_VERSION).x/ -name '*.patch' -type f \
	| sort -V | while read -r pfile ; do \
	    [ -n "$${pfile}" ] || continue ; \
	    echo "npm: applying $$(basename "$${pfile}")" ; \
	    patch -p1 < "$${pfile}" ; \
	done

	: # node-yarn-src: apply patches
	cd node-yarn-src ; \
	find $(CURDIR)/debian/patches/yarn-$(YARN_MAJOR_VERSION).x/ -name '*.patch' -type f \
	| sort -V | while read -r pfile ; do \
	    [ -n "$${pfile}" ] || continue ; \
	    echo "yarn: applying $$(basename "$${pfile}")" ; \
	    patch -p1 < "$${pfile}" ; \
	done

	: # ICU: Node.js '$(DEPS_ICU_VERSION)' . Debian '$(DEBIAN_ICU_VERSION)'
ifneq (,$(system_icu))
	sed -i -E '/libicu-dev/d' debian/control
endif

	: # libc-ares: Node.js '$(DEPS_LIBC_ARES_VERSION)' . Debian '$(DEBIAN_LIBC_ARES_VERSION)'
ifneq (,$(system_libc_ares))
	sed -i -E '/libc-ares-dev/d' debian/control
endif

	: # libuv: Node.js '$(DEPS_LIBUV_VERSION)' . Debian '$(DEBIAN_LIBUV_VERSION)'
ifneq (,$(system_libuv))
	sed -i -E '/libuv1-dev/d' debian/control
endif

	: # nghttp2: Node.js '$(DEPS_NGHTTP2_VERSION)' . Debian '$(DEBIAN_NGHTTP2_VERSION)'
ifneq (,$(system_nghttp2))
	sed -i -E '/libnghttp2-dev/d' debian/control
endif

define deb_nodejs_configure

	rm -rf $(strip $(1)) ; mkdir -p $(strip $(1))

	find $(CURDIR) -mindepth 1 -maxdepth 1 -printf '%P\0' \
	| grep -zEv '^(\.pc|debian|node-.+)$$' | sort -zu \
	| xargs -0r cp -t $(strip $(1)) -alP

	env -C $(strip $(1)) \
	  -u LD_LIBRARY_PATH \
	  -u LD_PRELOAD \
	$(PYTHON) configure.py $(strip $(CONFIGURE_FLAGS) $(2))

endef

define deb_nodejs_build

	build_ret=0 ; \
	for i in $$( seq 1 3 ) ; do \
	    set +e ; \
	    env -C $(strip $(1)) \
	      make -j $(NPROC_MAKE) all ; \
	    build_ret=$$? ; \
	    set -e ; \
	    [ "$${build_ret}" = 0 ] || continue ; \
	    break ; \
	done ; \
	[ "$${build_ret}" = 0 ] || exit $${build_ret}

	env -C /tmp $(call test_nodejs, $(1) ) -e 'console.log(module.paths)'

endef

export NODE_TEST_DIR = $(CURDIR)/debian/tmp.test
export NODE_TEST_NO_INTERNET = 1
export CI_JS_SUITES = message parallel sequential
export TEST_CI_ARGS = --timeout=3000
export FLAKY_TESTS = dontcare

define deb_nodejs_test

	$(call remove_pycache, $(1) )

	rm -rf $(NODE_TEST_DIR)
	mkdir -p $(NODE_TEST_DIR)

	env -C $(strip $(1)) \
	  HOME=$(NODE_TEST_DIR) \
	$(PYTHON) tools/test.py -j $(NPROC_TEST) \
	  -p tap \
	  --mode=release \
	  --flaky-tests=$(FLAKY_TESTS) \
	  $(TEST_CI_ARGS) \
	  $(CI_JS_SUITES) \
	$(if $(strip $(2)),|| $(strip $(2)))

	rm -rf $(NODE_TEST_DIR)

	$(call remove_pycache, $(1) )

endef

override_dh_auto_build:
	$(call remove_pycache, $(CURDIR) )

	$(call deb_nodejs_configure, $(DEB_BUILD_PATH) , )
	$(call deb_nodejs_build, $(DEB_BUILD_PATH) )

ifneq (,$(filter noautodbgsym,$(DEB_BUILD_OPTIONS)))
	: # early strip binaries
	env -C $(DEB_BUILD_PATH) \
	find out/Release/ -mindepth 1 -maxdepth 1 -type f -exec ls -l {} +
	env -C $(DEB_BUILD_PATH) \
	find out/Release/ -mindepth 1 -maxdepth 1 -type f -exec strip --strip-debug {} + || :
	env -C $(DEB_BUILD_PATH) \
	find out/Release/ -mindepth 1 -maxdepth 1 -type f -exec ls -l {} +
endif

ifeq (,$(filter nocheck,$(DEB_BUILD_OPTIONS)))
	$(call deb_nodejs_test, $(DEB_BUILD_PATH) , )
endif

	: # build npm and yarn
	h=$(CURDIR)/debian/tmp.home ; \
	d=$(CURDIR)/debian/tmp.path ; \
	rm -rf "$$h" "$$d" ; mkdir -p "$$h" "$$d" ; \
	ln -s $(CURDIR)/node-npm/bin/npm-cli.js "$$d/npm" ; \
	ln -s $(CURDIR)/node-npm/bin/npx-cli.js "$$d/npx" ; \
	ln -s $(CURDIR)/node-yarn/bin/yarn.js "$$d/yarn" ; \
	export HOME="$$h" ; \
	export NODE_HOME=$(DEB_BUILD_PATH) ; \
	export PATH="$$d:$(DEB_BUILD_PATH)/out/Release:$$PATH" ; \
	env -C node-npm-src sh standalone-build.sh ; \
	env -C node-yarn-src sh standalone-build.sh ; \
	rm -rf "$$h" "$$d"

override_dh_auto_test:

define deb_nodejs_install

	rm -rf debian/tmp
	dh_auto_install --sourcedir=$(strip $(1)) --builddir=$(strip $(1))

	: # remove build artifacts (uses a lot of disk space)
	rm -rf $(strip $(1))/out

	: # remove unneeded manpages
	rm -rf debian/tmp/$(NODEJS_PREFIX)/share/man

	: # copy own scripts
	for i in node-gyp npm npx yarn ; do \
	    d=debian/tmp/$(NODEJS_PREFIX)/bin/$$i ; \
	    cp debian/$$i.sh $$d ; \
	    chmod 0755 $$d ; \
	done

	: # prepare development files
	mkdir -p debian/tmp/$(NODEJS_PREFIX)/include/node
	env -C debian/tmp/$(NODEJS_PREFIX)/include \
	  ln -s node nodejs

	: # copy (missing) headers
	env -C $(strip $(1)) \
	find src/ deps/v8/include/ -name '*.h*' -type f -print0 \
	| sort -zuV | tar -C $(strip $(1)) --null -T - -cf - \
	| tar -C debian/tmp/$(NODEJS_PREFIX)/include/node -xf -

endef

define deb_nodejs_install_extras

	: # copy extra node packages to appropriate location

	: # @types/node
	d=debian/tmp/$(NODEJS_MODULES)/@types/node ; \
	mkdir -p $$d; \
	tar -C node-types -cf - . \
	| tar -C $$d -xf -

	: # npm & yarn
	for i in npm yarn ; do \
	    d=debian/tmp/$(NODEJS_LIBDIR)/$$i ; \
	    mkdir -p $$d; \
	    tar -C node-$$i-src/dist -cf - . \
	    | tar -C $$d -xf - ; \
	done

	: # collect extra package versions for dh_gencontrol
	f=node-npm-src/dist/node_modules/node-gyp/package.json ; \
	jq -r '"jspkg:node-gyp=" + .version' $$f  | tee -a debian/jspkg.substvars

	: # cleanup node packages
	find debian/tmp/$(NODEJS_LIBDIR)/ -iname 'readme*' -type f -exec rm -fv {} +
	find debian/tmp/$(NODEJS_LIBDIR)/ -iname 'changelog*' -type f -exec rm -fv {} +
	find debian/tmp/$(NODEJS_LIBDIR)/ -iname '*.md' ! -iname 'license*' -type f -exec rm -fv {} +
	find debian/tmp/$(NODEJS_LIBDIR)/ -path '*/bin/*.cmd' -type f -exec rm -fv {} +
	find debian/tmp/$(NODEJS_LIBDIR)/ -path '*/doc*/*' -type f -exec rm -fv {} +
	find debian/tmp/$(NODEJS_LIBDIR)/ -path '*/man*/*' -type f -exec rm -fv {} +
	find debian/tmp/$(NODEJS_LIBDIR)/ -path '*/test*/*' -type f -exec rm -fv {} +

	$(call remove_pycache, debian/tmp )

	: # fix permissions and hashbangs
	find debian/tmp/$(NODEJS_LIBDIR)/ -type f -exec chmod a-x {} +
	$(call fix_hashbangs_r, debian/tmp , $(NODEJS_HASHBANG_RX) , $(NODEJS_HASHBANG) )

	: # remove directories without files/symlinks
	find debian/tmp/$(NODEJS_LIBDIR)/ -type d | sort -V | while read -r d ; do \
	    [ -d "$$d" ] || continue ; \
	    find $$d/ ! -type d -printf . -quit | grep -Fq . || rm -rfv $$d ; \
	done

endef

override_dh_auto_install:
	$(call deb_nodejs_install, $(DEB_BUILD_PATH) )
	$(call deb_nodejs_install_extras)

	: # adjust configs
	sed -i -E '/^(update-notifier|cache)=/d' debian/npmrc
	sed -i -E '/^(disable-self-update-check|nonInteractive|plugnplay-shebang) /d' debian/yarnrc

override_dh_strip_nondeterminism:
	dh_strip_nondeterminism $(addprefix --exclude=,.exe .gcda .png)

execute_after_dh_fixperms:
	find debian/ -path '*/$(NODEJS_PREFIX)/*/bin/*' -type f -exec chmod 0755 {} +
	find debian/ -path '*/share/thin-ci.sh' -type f -exec chmod 0755 {} +

# don't run dwz - nodejs is too heavy
override_dh_dwz:
#	dh_dwz $(addprefix --exclude=,.exe .gcda)

override_dh_strip:
	dh_strip $(addprefix --exclude=,.exe .gcda)

# node isn't build with shared library
#override_dh_shlibdeps:
#	dh_shlibdeps -ldebian/tmp/$(NODEJS_LIBDIR)

DH_GENCTRL_COMMON = -Tdebian/jspkg.substvars -Tdebian/substvars
override_dh_gencontrol:
	dh_gencontrol -- $(DH_GENCTRL_COMMON)

# -- package templating - here goes dragons! --

_deb_control_templates = $(wildcard debian/*NJSVER*)
_deb_rename =$(subst NJSVER,$(NODEJS_MAJOR_VERSION),$(strip $(1)))

include debian/rules.self-template
