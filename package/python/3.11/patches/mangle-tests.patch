--- a/Lib/test/libregrtest/main.py
+++ b/Lib/test/libregrtest/main.py
@@ -725,20 +725,7 @@ class Regrtest:
             self.tmp_dir = self.ns.tempdir
 
         if not self.tmp_dir:
-            # When tests are run from the Python build directory, it is best practice
-            # to keep the test files in a subfolder.  This eases the cleanup of leftover
-            # files using the "make distclean" command.
-            if sysconfig.is_python_build():
-                self.tmp_dir = sysconfig.get_config_var('abs_builddir')
-                if self.tmp_dir is None:
-                    # bpo-30284: On Windows, only srcdir is available. Using
-                    # abs_builddir mostly matters on UNIX when building Python
-                    # out of the source tree, especially when the source tree
-                    # is read only.
-                    self.tmp_dir = sysconfig.get_config_var('srcdir')
-                self.tmp_dir = os.path.join(self.tmp_dir, 'build')
-            else:
-                self.tmp_dir = tempfile.gettempdir()
+            self.tmp_dir = tempfile.gettempdir()
 
         self.tmp_dir = os.path.abspath(self.tmp_dir)
 
--- a/Lib/test/pickletester.py
+++ b/Lib/test/pickletester.py
@@ -2575,7 +2575,6 @@ class AbstractPickleTests:
         elif frameless_start is not None:
             self.assertLess(pos - frameless_start, self.FRAME_SIZE_MIN)
 
-    @support.skip_if_pgo_task
     def test_framing_many_objects(self):
         obj = list(range(10**5))
         for proto in range(4, pickle.HIGHEST_PROTOCOL + 1):
@@ -2665,7 +2664,6 @@ class AbstractPickleTests:
                                 count_opcode(pickle.FRAME, pickled))
                 self.assertEqual(obj, self.loads(some_frames_pickle))
 
-    @support.skip_if_pgo_task
     def test_framed_write_sizes_with_delayed_writer(self):
         class ChunkAccumulator:
             """Accumulate pickler output in a list of raw chunks."""
--- a/Lib/test/test__xxsubinterpreters.py
+++ b/Lib/test/test__xxsubinterpreters.py
@@ -489,7 +489,6 @@ class IsRunningTests(TestBase):
         main = interpreters.get_main()
         self.assertTrue(interpreters.is_running(main))
 
-    @unittest.skip('Fails on FreeBSD')
     def test_subinterpreter(self):
         interp = interpreters.create()
         self.assertFalse(interpreters.is_running(interp))
--- a/Lib/test/test_asyncore.py
+++ b/Lib/test/test_asyncore.py
@@ -15,9 +15,6 @@ from test.support import threading_helpe
 from test.support import warnings_helper
 from io import BytesIO
 
-if support.PGO:
-    raise unittest.SkipTest("test is not helpful for PGO")
-
 support.requires_working_socket(module=True)
 
 asyncore = warnings_helper.import_deprecated('asyncore')
--- a/Lib/test/test_concurrent_futures.py
+++ b/Lib/test/test_concurrent_futures.py
@@ -376,10 +376,6 @@ class ExecutorShutdownTest:
         self.assertGreater(len(others), 0)
 
     def test_hang_gh83386(self):
-        """shutdown(wait=False) doesn't hang at exit with running futures.
-
-        See https://github.com/python/cpython/issues/83386.
-        """
         if self.executor_type == futures.ProcessPoolExecutor:
             raise unittest.SkipTest(
                 "Hangs, see https://github.com/python/cpython/issues/83386")
@@ -398,11 +394,6 @@ class ExecutorShutdownTest:
         self.assertEqual(out.strip(), b"apple")
 
     def test_hang_gh94440(self):
-        """shutdown(wait=True) doesn't hang when a future was submitted and
-        quickly canceled right before shutdown.
-
-        See https://github.com/python/cpython/issues/94440.
-        """
         if not hasattr(signal, 'alarm'):
             raise unittest.SkipTest(
                 "Tested platform does not support the alarm signal")
--- a/Lib/test/test_exceptions.py
+++ b/Lib/test/test_exceptions.py
@@ -1094,7 +1094,6 @@ class ExceptionTests(unittest.TestCase):
         self.assertIsInstance(exc.__context__, ValueError)
         self.assertIs(exc.__context__.__context__, exc.__context__)
 
-    @unittest.skip("See issue 44895")
     def test_no_hang_on_context_chain_cycle2(self):
         # See issue 25782. Cycle at head of context chain.
 
--- a/Lib/test/test_importlib/test_resource.py
+++ b/Lib/test/test_importlib/test_resource.py
@@ -182,7 +182,6 @@ class DeletingZipsTest(unittest.TestCase
         self.zip_path.unlink()
         del c
 
-    @unittest.skip("Desired but not supported.")
     def test_as_file_does_not_keep_open(self):  # pragma: no cover
         c = resources.as_file(resources.files('ziptestdata') / 'binary.file')
         self.zip_path.unlink()
--- a/Lib/test/test_interpreters.py
+++ b/Lib/test/test_interpreters.py
@@ -246,7 +246,6 @@ class TestInterpreterIsRunning(TestBase)
         main = interpreters.get_main()
         self.assertTrue(main.is_running())
 
-    @unittest.skip('Fails on FreeBSD')
     def test_subinterpreter(self):
         interp = interpreters.create()
         self.assertFalse(interp.is_running())
@@ -374,7 +373,6 @@ class TestInterpreterClose(TestBase):
         t.start()
         t.join()
 
-    @unittest.skip('Fails on FreeBSD')
     def test_still_running(self):
         main, = interpreters.list_all()
         interp = interpreters.create()
@@ -432,7 +430,6 @@ class TestInterpreterRun(TestBase):
             content = file.read()
             self.assertEqual(content, expected)
 
-    @unittest.skip('Fails on FreeBSD')
     def test_already_running(self):
         interp = interpreters.create()
         with _running(interp):
--- a/Lib/test/test_itertools.py
+++ b/Lib/test/test_itertools.py
@@ -2228,7 +2228,6 @@ class RegressionTests(unittest.TestCase)
         self.assertRaises(AssertionError, list, cycle(gen1()))
         self.assertEqual(hist, [0,1])
 
-    @support.skip_if_pgo_task
     def test_long_chain_of_empty_iterables(self):
         # Make sure itertools.chain doesn't run into recursion limits when
         # dealing with long chains of empty iterables. Even with a high
--- a/Lib/test/test_multiprocessing_fork.py
+++ b/Lib/test/test_multiprocessing_fork.py
@@ -4,9 +4,6 @@ import test._test_multiprocessing
 import sys
 from test import support
 
-if support.PGO:
-    raise unittest.SkipTest("test is not helpful for PGO")
-
 if sys.platform == "win32":
     raise unittest.SkipTest("fork is not available on Windows")
 
--- a/Lib/test/test_multiprocessing_forkserver.py
+++ b/Lib/test/test_multiprocessing_forkserver.py
@@ -4,9 +4,6 @@ import test._test_multiprocessing
 import sys
 from test import support
 
-if support.PGO:
-    raise unittest.SkipTest("test is not helpful for PGO")
-
 if sys.platform == "win32":
     raise unittest.SkipTest("forkserver is not available on Windows")
 
--- a/Lib/test/test_multiprocessing_main_handling.py
+++ b/Lib/test/test_multiprocessing_main_handling.py
@@ -17,9 +17,6 @@ from test.support.script_helper import (
     make_pkg, make_script, make_zip_pkg, make_zip_script,
     assert_python_ok)
 
-if support.PGO:
-    raise unittest.SkipTest("test is not helpful for PGO")
-
 # Look up which start methods are available to test
 import multiprocessing
 AVAILABLE_START_METHODS = set(multiprocessing.get_all_start_methods())
--- a/Lib/test/test_multiprocessing_spawn.py
+++ b/Lib/test/test_multiprocessing_spawn.py
@@ -3,9 +3,6 @@ import test._test_multiprocessing
 
 from test import support
 
-if support.PGO:
-    raise unittest.SkipTest("test is not helpful for PGO")
-
 test._test_multiprocessing.install_tests_in_module_dict(globals(), 'spawn')
 
 if __name__ == '__main__':
--- a/Lib/test/test_nntplib.py
+++ b/Lib/test/test_nntplib.py
@@ -141,8 +141,6 @@ class NetworkedNNTPTestsMixin:
         self.assertLessEqual(art_num, last)
         self._check_art_dict(art_dict)
 
-    @unittest.skipIf(True, 'temporarily skipped until a permanent solution'
-                           ' is found for issue #28971')
     def test_over(self):
         resp, count, first, last, name = self.server.group(self.GROUP_NAME)
         start = last - 10
@@ -346,7 +344,7 @@ class NetworkedNNTPTests(NetworkedNNTPTe
         if cls.server is not None:
             cls.server.quit()
 
-@unittest.skipUnless(ssl, 'requires SSL support')
+@unittest.skip('skip tests for aioe.org')
 class NetworkedNNTP_SSLTests(NetworkedNNTPTests):
 
     # Technical limits for this public NNTP server (see http://www.aioe.org):
--- a/Lib/test/test_os.py
+++ b/Lib/test/test_os.py
@@ -3299,7 +3299,6 @@ class SpawnTests(unittest.TestCase):
 
 # The introduction of this TestCase caused at least two different errors on
 # *nix buildbots. Temporarily skip this to let the buildbots move along.
-@unittest.skip("Skip due to platform/environment differences on *NIX buildbots")
 @unittest.skipUnless(hasattr(os, 'getlogin'), "test needs os.getlogin")
 class LoginTests(unittest.TestCase):
     def test_getlogin(self):
--- a/Lib/test/test_pydoc.py
+++ b/Lib/test/test_pydoc.py
@@ -990,7 +990,6 @@ class PydocImportTest(PydocBaseTest):
             finally:
                 sys.path[:] = saved_paths
 
-    @unittest.skip('causes undesirable side-effects (#20128)')
     def test_modules(self):
         # See Helper.listmodules().
         num_header_lines = 2
@@ -1006,7 +1005,6 @@ class PydocImportTest(PydocBaseTest):
 
         self.assertGreaterEqual(num_lines, expected)
 
-    @unittest.skip('causes undesirable side-effects (#20128)')
     def test_modules_search(self):
         # See Helper.listmodules().
         expected = 'pydoc - '
@@ -1019,7 +1017,6 @@ class PydocImportTest(PydocBaseTest):
 
         self.assertIn(expected, result)
 
-    @unittest.skip('some buildbots are not cooperating (#20128)')
     def test_modules_search_builtin(self):
         expected = 'gc - '
 
--- a/Lib/test/test_socket.py
+++ b/Lib/test/test_socket.py
@@ -66,6 +66,7 @@ def get_cid():
 
 def _have_socket_can():
     """Check whether CAN sockets are supported on this host."""
+    return False
     try:
         s = socket.socket(socket.PF_CAN, socket.SOCK_RAW, socket.CAN_RAW)
     except (AttributeError, OSError):
@@ -76,6 +77,7 @@ def _have_socket_can():
 
 def _have_socket_can_isotp():
     """Check whether CAN ISOTP sockets are supported on this host."""
+    return False
     try:
         s = socket.socket(socket.PF_CAN, socket.SOCK_DGRAM, socket.CAN_ISOTP)
     except (AttributeError, OSError):
@@ -86,6 +88,7 @@ def _have_socket_can_isotp():
 
 def _have_socket_can_j1939():
     """Check whether CAN J1939 sockets are supported on this host."""
+    return False
     try:
         s = socket.socket(socket.PF_CAN, socket.SOCK_DGRAM, socket.CAN_J1939)
     except (AttributeError, OSError):
@@ -96,6 +99,7 @@ def _have_socket_can_j1939():
 
 def _have_socket_rds():
     """Check whether RDS sockets are supported on this host."""
+    return False
     try:
         s = socket.socket(socket.PF_RDS, socket.SOCK_SEQPACKET, 0)
     except (AttributeError, OSError):
@@ -116,6 +120,7 @@ def _have_socket_alg():
 
 def _have_socket_qipcrtr():
     """Check whether AF_QIPCRTR sockets are supported on this host."""
+    return False
     try:
         s = socket.socket(socket.AF_QIPCRTR, socket.SOCK_DGRAM, 0)
     except (AttributeError, OSError):
@@ -126,12 +131,14 @@ def _have_socket_qipcrtr():
 
 def _have_socket_vsock():
     """Check whether AF_VSOCK sockets are supported on this host."""
+    return False
     ret = get_cid() is not None
     return ret
 
 
 def _have_socket_bluetooth():
     """Check whether AF_BLUETOOTH sockets are supported on this host."""
+    return False
     try:
         # RFCOMM is supported by all platforms with bluetooth support. Windows
         # does not support omitting the protocol.
@@ -1045,6 +1052,7 @@ class GeneralModuleTests(unittest.TestCa
             with self.assertRaises(OSError, msg=explanation):
                 socket.gethostbyaddr(addr)
 
+    @unittest.skip('avoid sethostname()')
     @unittest.skipUnless(hasattr(socket, 'sethostname'), "test needs socket.sethostname()")
     @unittest.skipUnless(hasattr(socket, 'gethostname'), "test needs socket.gethostname()")
     def test_sethostname(self):
--- a/Lib/test/test_statistics.py
+++ b/Lib/test/test_statistics.py
@@ -2743,7 +2743,6 @@ class TestNormalDist:
         self.assertEqual(X.cdf(float('Inf')), 1.0)
         self.assertTrue(math.isnan(X.cdf(float('NaN'))))
 
-    @support.skip_if_pgo_task
     def test_inv_cdf(self):
         NormalDist = self.module.NormalDist
 
--- a/Lib/test/test_subprocess.py
+++ b/Lib/test/test_subprocess.py
@@ -46,9 +46,6 @@ try:
 except:
     fcntl = None
 
-if support.PGO:
-    raise unittest.SkipTest("test is not helpful for PGO")
-
 if not support.has_subprocess_support:
     raise unittest.SkipTest("test module requires subprocess")
 
@@ -1690,7 +1687,6 @@ class RunFuncTestCase(BaseTestCase):
         res = subprocess.run(args)
         self.assertEqual(res.returncode, 57)
 
-    @unittest.skipUnless(mswindows, "Maybe test trigger a leak on Ubuntu")
     def test_run_with_an_empty_env(self):
         # gh-105436: fix subprocess.run(..., env={}) broken on Windows
         args = [sys.executable, "-c", 'pass']
--- a/Lib/test/test_support.py
+++ b/Lib/test/test_support.py
@@ -65,7 +65,6 @@ class TestSupport(unittest.TestCase):
                         self.test_get_attribute)
         self.assertRaises(unittest.SkipTest, support.get_attribute, self, "foo")
 
-    @unittest.skip("failing buildbots")
     def test_get_original_stdout(self):
         self.assertEqual(support.get_original_stdout(), sys.stdout)
 
--- a/Lib/test/test_time.py
+++ b/Lib/test/test_time.py
@@ -135,6 +135,7 @@ class TimeTestCase(unittest.TestCase):
         self.assertGreater(res, 0.0)
         self.assertLessEqual(res, 1.0)
 
+    @unittest.skip("avoid clock_settime()")
     @unittest.skipUnless(hasattr(time, 'clock_settime'),
                          'need time.clock_settime()')
     def test_clock_settime(self):
@@ -446,10 +447,6 @@ class TimeTestCase(unittest.TestCase):
             else:
                 self.assertEqual(time.mktime(tt), t)
 
-    # Issue #13309: passing extreme values to mktime() or localtime()
-    # borks the glibc's internal timezone data.
-    @unittest.skipUnless(platform.libc_ver()[0] != 'glibc',
-                         "disabled because of a bug in glibc. Issue #13309")
     def test_mktime_error(self):
         # It may not be possible to reliably make mktime return an error
         # on all platforms.  This will make sure that no other exception
@@ -525,6 +522,7 @@ class TimeTestCase(unittest.TestCase):
         self.assertTrue(info.monotonic)
         self.assertFalse(info.adjustable)
 
+    @unittest.skip("avoid clock_settime()")
     @unittest.skipUnless(hasattr(time, 'clock_settime'),
                          'need time.clock_settime')
     def test_monotonic_settime(self):
