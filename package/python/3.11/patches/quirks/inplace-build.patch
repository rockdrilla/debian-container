--- a/Lib/distutils/command/build.py
+++ b/Lib/distutils/command/build.py
@@ -54,6 +54,7 @@ class build(Command):
         ]
 
     def initialize_options(self):
+        self.build_topdir = None
         self.build_base = 'build'
         # these are decided only after 'build_base' has its final value
         # (unless overridden by the user or client)
@@ -119,6 +120,8 @@ class build(Command):
         if self.executable is None and sys.executable:
             self.executable = os.path.normpath(sys.executable)
 
+        self.build_base = os.getenv('DEB_PYTHON_BUILD_DIR', self.build_base)
+
         if isinstance(self.parallel, str):
             try:
                 self.parallel = int(self.parallel)
--- a/Lib/distutils/command/build_clib.py
+++ b/Lib/distutils/command/build_clib.py
@@ -72,8 +72,8 @@ class build_clib(Command):
         # by-products, at least from the point of view of building Python
         # extensions -- but I want to keep my options open.
         self.set_undefined_options('build',
-                                   ('build_temp', 'build_clib'),
-                                   ('build_temp', 'build_temp'),
+                                   ('build_base', 'build_clib'),
+                                   ('build_base', 'build_temp'),
                                    ('compiler', 'compiler'),
                                    ('debug', 'debug'),
                                    ('force', 'force'))
--- a/Lib/distutils/command/build_ext.py
+++ b/Lib/distutils/command/build_ext.py
@@ -105,6 +105,7 @@ class build_ext(Command):
 
     def initialize_options(self):
         self.extensions = None
+        self.build_base = None
         self.build_lib = None
         self.plat_name = None
         self.build_temp = None
@@ -131,6 +132,7 @@ class build_ext(Command):
         from distutils import sysconfig
 
         self.set_undefined_options('build',
+                                   ('build_base', 'build_base'),
                                    ('build_lib', 'build_lib'),
                                    ('build_temp', 'build_temp'),
                                    ('compiler', 'compiler'),
@@ -493,6 +495,11 @@ class build_ext(Command):
         # sort to make the resulting .so file build reproducible
         sources = sorted(sources)
 
+        rel_sources = []
+        for s in sources:
+            rel_sources.append(os.path.relpath(os.path.abspath(s), self.build_base))
+        ext.sources = sources = sorted(rel_sources)
+
         ext_path = self.get_ext_fullpath(ext.name)
         depends = sources + ext.depends
         if not (self.force or newer_group(depends, ext_path, 'newer')):
@@ -527,7 +534,7 @@ class build_ext(Command):
             macros.append((undef,))
 
         objects = self.compiler.compile(sources,
-                                         output_dir=self.build_temp,
+                                         output_dir=self.build_base,
                                          macros=macros,
                                          include_dirs=ext.include_dirs,
                                          debug=self.debug,
