--- a/Lib/_distutils_system_mod.py
+++ b/Lib/_distutils_system_mod.py
@@ -104,12 +104,16 @@ def is_virtual_environment():
     return sys.base_prefix != sys.prefix or hasattr(sys, "real_prefix")
 
 
+def is_debian_environment():
+    deb_build = os.environ.get('DEB_PYTHON_INSTALL_LAYOUT', 'posix_local')
+    return deb_build in ('deb', 'deb_system')
+
+
 def _posix_lib(standard_lib, libpython, early_prefix, prefix):
-    is_default_prefix = not early_prefix or os.path.normpath(early_prefix) in ('/usr', '/usr/local')
     if standard_lib:
         return libpython
-    elif is_default_prefix and not is_virtual_environment():
-        return os.path.join(prefix, "lib", "python3", "dist-packages")
+    elif is_debian_environment():
+        return os.path.join(prefix, 'lib/python3/dist-packages')
     else:
         return os.path.join(libpython, "site-packages")
 
--- a/Lib/distutils/command/install.py
+++ b/Lib/distutils/command/install.py
@@ -39,10 +39,10 @@ INSTALL_SCHEMES = {"unix_prefix": {}, "u
 INSTALL_SCHEMES['unix_local'] = {
     'stdlib': '{installed_base}/{platlibdir}/python{py_version_short}',
     'platstdlib': '{platbase}/{platlibdir}/python{py_version_short}',
-    'purelib': '{base}/local/lib/python{py_version_short}/dist-packages',
-    'platlib': '{platbase}/local/{platlibdir}/python{py_version_short}/dist-packages',
+    'purelib': '{base}/local/lib/python{py_version_short}/site-packages',
+    'platlib': '{platbase}/local/{platlibdir}/python{py_version_short}/site-packages',
     'include': '{installed_base}/include/python{py_version_short}{abiflags}',
-    'headers': '{base}/local/include/python{py_version_short}{abiflags}',
+    'headers': '{base}/include/python{py_version_short}{abiflags}',
     'platinclude': '{installed_platbase}/include/python{py_version_short}{abiflags}',
     'scripts': '{base}/local/bin',
     'data': '{base}/local',
--- a/Lib/distutils/sysconfig.py
+++ b/Lib/distutils/sysconfig.py
@@ -324,6 +324,11 @@ def get_python_inc(plat_specific=0, pref
             "on platform '%s'" % os.name)
 
 
+def is_debian_environment():
+    deb_build = os.environ.get('DEB_PYTHON_INSTALL_LAYOUT', 'posix_local')
+    return deb_build in ('deb', 'deb_system')
+
+
 def get_python_lib(plat_specific=0, standard_lib=0, prefix=None):
     """Return the directory containing the Python library (standard or
     site additions).
@@ -338,7 +343,6 @@ def get_python_lib(plat_specific=0, stan
     If 'prefix' is supplied, use it instead of sys.base_prefix or
     sys.base_exec_prefix -- i.e., ignore 'plat_specific'.
     """
-    is_default_prefix = not prefix or os.path.normpath(prefix) in ('/usr', '/usr/local')
     if prefix is None:
         if standard_lib:
             prefix = plat_specific and BASE_EXEC_PREFIX or BASE_PREFIX
@@ -357,8 +361,8 @@ def get_python_lib(plat_specific=0, stan
                                  "python" + get_python_version())
         if standard_lib:
             return libpython
-        elif is_default_prefix and not is_virtual_environment():
-            return os.path.join(prefix, "lib", "python3", "dist-packages")
+        elif is_debian_environment():
+            return os.path.join(prefix, 'lib/python3/dist-packages')
         else:
             return os.path.join(libpython, "site-packages")
     elif os.name == "nt":
--- a/Lib/site.py
+++ b/Lib/site.py
@@ -15,9 +15,9 @@ also inspected for path configuration fi
 
 For Debian and derivatives, this sys.path is augmented with directories
 for packages distributed within the distribution. Local addons go
-into /usr/local/lib/python<version>/dist-packages, Debian addons
+into /usr/local/lib/python<version>/site-packages, Debian addons
 install into /usr/lib/python3/dist-packages.
-/usr/lib/python<version>/site-packages is not used.
+/usr/lib/python<version>/site-packages is used internally.
 
 If a file named "pyvenv.cfg" exists one directory above sys.executable,
 sys.prefix and sys.exec_prefix are set to that directory and
@@ -375,21 +375,17 @@ def getsitepackages(prefixes=None):
 
         if os.sep == '/':
             if is_virtual_environment:
-                sitepackages.append(os.path.join(prefix, "lib",
-                                                 "python%d.%d" % sys.version_info[:2],
-                                                 "site-packages"))
-            sitepackages.append(os.path.join(prefix, "local/lib",
-                                             "python%d.%d" % sys.version_info[:2],
-                                             "dist-packages"))
-            sitepackages.append(os.path.join(prefix, "lib",
-                                             "python3",
-                                             "dist-packages"))
-            # this one is deprecated for Debian
+                sitepackages.append(os.path.join(prefix, 'lib/python%d.%d/site-packages' % sys.version_info[:2]))
+
+            sitepackages.append(os.path.join(prefix, 'local/lib/python%d.%d/site-packages' % sys.version_info[:2]))
+            # paths owned by container-python-{pyver}
             for libdir in libdirs:
-                path = os.path.join(prefix, libdir,
-                                    "python%d.%d" % sys.version_info[:2],
-                                    "dist-packages")
+                path = os.path.join(prefix, libdir, 'python%d.%d/site-packages' % sys.version_info[:2])
                 sitepackages.append(path)
+            # compatibility with Debian and derivatives
+            sitepackages.append(os.path.join(prefix, 'local/lib/python%d.%d/dist-packages' % sys.version_info[:2]))
+            sitepackages.append(os.path.join(prefix, 'lib/python3/dist-packages'))
+            sitepackages.append(os.path.join(prefix, 'lib/python%d.%d/dist-packages' % sys.version_info[:2]))
         else:
             sitepackages.append(prefix)
 
--- a/Lib/sysconfig.py
+++ b/Lib/sysconfig.py
@@ -51,8 +51,8 @@ _INSTALL_SCHEMES = {
     'posix_local': {
         'stdlib': '{installed_base}/lib/python{py_version_short}',
         'platstdlib': '{platbase}/lib/python{py_version_short}',
-        'purelib': '{base}/local/lib/python{py_version_short}/dist-packages',
-        'platlib': '{platbase}/local/lib/python{py_version_short}/dist-packages',
+        'purelib': '{base}/local/lib/python{py_version_short}/site-packages',
+        'platlib': '{platbase}/local/lib/python{py_version_short}/site-packages',
         'include':
             '{installed_base}/include/python{py_version_short}{abiflags}',
         'platinclude':
--- a/Lib/test/test_site.py
+++ b/Lib/test/test_site.py
@@ -282,19 +282,19 @@ class HelperFunctionsTests(unittest.Test
         site.PREFIXES = ['xoxo']
         dirs = site.getsitepackages()
         if os.sep == '/':
+            self.assertEqual(len(dirs), 5)
             # OS X, Linux, FreeBSD, etc
             if sys.platlibdir != "lib":
-                self.assertEqual(len(dirs), 3)
-                wanted = os.path.join('xoxo', 'local', 'lib',
-                                      'python%d.%d' % sys.version_info[:2],
-                                      'dist-packages')
+                wanted = os.path.join('xoxo/local/lib/python%d.%d/site-packages' % sys.version_info[:2])
                 self.assertEqual(dirs[0], wanted)
-            else:
-                self.assertEqual(len(dirs), 3)
-            wanted = os.path.join('xoxo', 'lib',
-                                  'python%d.%d' % sys.version_info[:2],
-                                  'dist-packages')
-            self.assertEqual(dirs[-1], wanted)
+            wanted = os.path.join('xoxo/lib/python%d.%d/site-packages' % sys.version_info[:2])
+            self.assertEqual(dirs[1], wanted)
+            wanted = os.path.join('xoxo/local/lib/python%d.%d/dist-packages' % sys.version_info[:2])
+            self.assertEqual(dirs[2], wanted)
+            wanted = os.path.join('xoxo/lib/python3/dist-packages')
+            self.assertEqual(dirs[3], wanted)
+            wanted = os.path.join('xoxo/lib/python%d.%d/dist-packages' % sys.version_info[:2])
+            self.assertEqual(dirs[4], wanted)
         else:
             # other platforms
             self.assertEqual(len(dirs), 2)
