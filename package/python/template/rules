#!/usr/bin/make -f

SHELL       :=/bin/sh
.SHELLFLAGS :=-ec

MAKEFLAGS += --no-print-directory

export DH_VERBOSE := 1

include /usr/share/dpkg/default.mk

include debian/rules.common-defs

export DEB_BUILD_MAINT_OPTIONS := hardening=+all,-stackprotectorstrong

# Ubuntu mangles png files by default, which can break some files.
export NO_PNG_PKG_MANGLE := 1

# handles DATE and TIME in Modules/getbuildinfo.c
export SOURCE_DATE_EPOCH

include debian/rules.pkg-info

PYTHON_SO_ABI = 1.0

PYTHON_VERSION ?= $(DEB_VERSION_UPSTREAM)

PYTHON_MAJOR_VERSION = $(word 1,$(subst .,$(space),$(PYTHON_VERSION)))
PYTHON_MINOR_VERSION = $(word 2,$(subst .,$(space),$(PYTHON_VERSION)))
PYTHON_BASE_VERSION = $(PYTHON_MAJOR_VERSION).$(PYTHON_MINOR_VERSION)

DEB_PYTHON_PRIO = $(shell printf '1%03d%03d0' $(PYTHON_MAJOR_VERSION) $(PYTHON_MINOR_VERSION))

PYTHON_PREFIX = opt/python-$(PYTHON_BASE_VERSION)
PYTHON_BINARY = usr/bin/python-$(PYTHON_BASE_VERSION)
PYTHON_MODULES = $(PYTHON_PREFIX)/lib/python$(PYTHON_BASE_VERSION)

include debian/rules.versions

distribution = $(if $(filter Ubuntu,$(DEB_VENDOR) $(DEB_PARENT_VENDOR)),Ubuntu,Debian)
distrelease  = $(shell sed -En '/^VERSION_CODENAME=(.+)$$/s//\1/p' /etc/os-release)

NPROC_MAKE := $(patsubst parallel=%,%,$(filter parallel=%,$(DEB_BUILD_OPTIONS)))
NPROC_MAKE := $(if $(NPROC_MAKE),$(NPROC_MAKE),$(shell nproc))
NPROC_TEST := $(shell echo "$$(( ( $(NPROC_MAKE) + 1 ) / 2 ))")

ifeq ($(distribution),Ubuntu)
  # test_ssl assumes that openssl is compiled with security level set to 1
  # make it so, during the build
  export OPENSSL_CONF = $(CURDIR)/debian/tests/openssl.cnf
endif

include debian/rules.gcc-latest-ver
include debian/rules.gcc-flags
include debian/rules.gcc-lto

DEB_PGO_PACKAGE = container-python-$(PYTHON_VERSION)-pgo
include debian/rules.gcc-pgo

export DEB_SRC_TOPDIR = $(CURDIR)
INSTALL_BSTRAP = $(CURDIR)/debian/tmp.bstrap
export HOME = $(CURDIR)/debian/tmp.home

export DEB_PGO_REUSE = $(pgo_reuse)
export DEB_PGO_FROM_BUILD = $(CURDIR)/debian/pgo
export DEB_PGO_FROM_PKG = $(PYTHON_PREFIX)/pgo-$(PYTHON_VERSION)

builtin_ext = \
  _abc _ast _asyncio _bisect _blake2 _collections _contextvars _csv _ctypes \
  _datetime _decimal _elementtree _functools _heapq _json _locale _md5 \
  _multibytecodec _multiprocessing _opcode _operator _pickle _posixshmem \
  _posixsubprocess _queue _random _sha1 _sha256 _sha3 _sha512 _socket _stat \
  _statistics _stringio _struct _tracemalloc _typing _zoneinfo array atexit \
  binascii cmath fcntl grp itertools math mmap pyexpat select spwd syslog \
  time unicodedata zlib

builtin_ext__list =$(strip $(foreach ext,$(sort $(strip $(builtin_ext))),$(ext)$(space)))
builtin_ext__re   =$(subst $(space),|,$(builtin_ext__list))

CONFIGURE_FLAGS = \
	--prefix=/$(PYTHON_PREFIX) \
	--build=$(DEB_HOST_MULTIARCH) \
	--sysconfdir=/etc \
	--localstatedir=/var \
	--runstatedir=/run \
	--disable-option-checking \
	--disable-silent-rules \
	--disable-maintainer-mode \
	--disable-dependency-tracking \
	--enable-ipv6 \
	--with-computed-gotos \
	--with-system-ffi \
	--enable-loadable-sqlite-extensions \
	--with-dbmliborder=bdb:gdbm \
	--with-ssl-default-suites=openssl \


CONFIGURE_FLAGS_FINAL = \
	--enable-shared \
	$(if $(filter yes,$(with_lto)),--with-lto) \
	$(if $(filter yes,$(with_pgo)),--enable-optimizations) \


config_site = \
	ac_cv_file__dev_ptmx=yes \
	ac_cv_file__dev_ptc=yes \
	ac_cv_posix_semaphores_enabled=yes \


export SSL_CERT_FILE = /etc/ssl/certs/ca-certificates.crt
export REQUESTS_CA_BUNDLE = /etc/ssl/certs/ca-certificates.crt

PIP_CONF = $(word 1,$(wildcard debian/pip.conf.build) debian/pip.conf)
export PIP_CONFIG_FILE = $(CURDIR)/$(PIP_CONF)

# $1 = PYTHONHOME
# $2 = library subdirectory (may be empty)
x_python_LD_LIBRARY_PATH = $(1)$(if $(2),/$(2))$(if $(LD_LIBRARY_PATH),:$(LD_LIBRARY_PATH))

# $1 = PYTHONHOME
# $2 = library subdirectory (may be empty)
# $3 = path to binary
# $4 - wrapper cmd
x_python = env \
	LD_LIBRARY_PATH=$(call x_python_LD_LIBRARY_PATH,$(strip $(1)),$(strip $(2))) \
	PYTHONHOME=$(strip $(1)) \
	PATH=$(dir $(strip $(1))/$(strip $(3))):$(PATH) \
	$(strip $(4)) $(strip $(1))/$(strip $(3))

# TEST_OPTS and TEST_EXCLUDES are defined here
include debian/rules.tests

ifneq (,$(wildcard debian/rules.local))
include debian/rules.local
endif

.NOTPARALLEL:

%:
	dh $@ --buildsystem=autoconf

execute_after_dh_clean:
ifeq ($(with_pgo)$(pgo_reuse),yesno)
	[ -s debian/control ] || exit 0 ; \
	grep -Fxq 'Package: $(DEB_PGO_PACKAGE)' debian/control || \
	{ echo ; cat debian/control.pgo ; } >> debian/control
endif

override_dh_autoreconf:
	dh_autoreconf autoreconf -- -fiv -Werror

execute_before_dh_auto_configure:
	: # verify that we' having "right" gcc version
	@echo '# CC = $(CC)' >&2
	@$(CC) --version 2>&1 | head -n 1 >&2

	: # verify CFLAGS
	@echo "# CFLAGS = $${CFLAGS}" >&2

	: # verify DEB_BUILD_OPTIONS
	@echo "# DEB_BUILD_OPTIONS = $${DEB_BUILD_OPTIONS}" >&2

	mkdir -p $(HOME)

override_dh_auto_configure:

bstrap_python = $(call x_python, $(INSTALL_BSTRAP)/$(PYTHON_PREFIX) , lib , bin/python$(PYTHON_BASE_VERSION) , fakeroot )

define deb_python_preconf

	sed -En '/^#($(builtin_ext__re))\s/p' Modules/Setup \
	| sed -E 's/^#//;s/-Wl,-Bdynamic//;s/-Wl,-Bstatic//' \
	>> $(strip $(1))/Modules/Setup.local

endef

define deb_python_configure

	rm -rf $(strip $(1)) ; mkdir -p $(strip $(1))

	find $(CURDIR) -mindepth 1 -maxdepth 1 -printf '%P\0' \
	| grep -zEv '^(\.pc|debian|pip-.+)$$' | sort -zu \
	| xargs -0r cp -t $(strip $(1)) -alP

	: # build quirk
	ln -s . $(strip $(1))/build

	$(call deb_python_preconf, $(1) )

	env -C $(strip $(1)) \
	  -u LD_LIBRARY_PATH \
	  -u LD_PRELOAD \
	  OPT=' ' \
	  MKDIR_P='/bin/mkdir -p' \
	  $(config_site) \
	./configure $(strip $(CONFIGURE_FLAGS) $(2))

	sed -i -E \
		-e 's$(xsedx)^RUNSHARED[[:space:]]*=[[:space:]]*(.*)$$$(xsedx)RUNSHARED = LD_PRELOAD= \1$(xsedx)' \
	$(strip $(1))/Makefile

	: # only applies to 2nd stage build
	f=$(strip $(1))/runpython.sh ; \
	: > $$f ; \
	echo '#!/bin/sh' >> $$f ; \
	echo 'export PYTHONPATH=$(INSTALL_BSTRAP)/$(PYTHON_MODULES)/site-packages' >> $$f ; \
	echo 'exec $(bstrap_python) "$$@"' >> $$f ; \
	chmod 0755 $$f

endef

test_python = $(call x_python, $(1) , , python , env -u PYTHONHOME )

define deb_python_build

	build_ret=0 ; \
	export DEB_PYTHON_BUILD_DIR=$(strip $(1)) ; \
	for i in $$( seq 1 3 ) ; do \
	  set +e ; \
	  env -C $(strip $(1)) \
	  make -j $(NPROC_MAKE) ; \
	  build_ret=$$? ; \
	  set -e ; \
	  [ "$${build_ret}" = 0 ] || continue ; \
	  break ; \
	done ; \
	[ "$${build_ret}" = 0 ] || exit $${build_ret}

	: # basic checks
	$(call test_python, $(1) ) -c 'from _multiprocessing import SemLock'
	$(call test_python, $(1) ) -c 'import _decimal'
	$(call test_python, $(1) ) -c 'import math, cmath'

	: # verify site packages paths
	$(call test_python, $(1) ) -c 'import site; print(site.getusersitepackages())'
	$(call test_python, $(1) ) -c 'import site; print(site.getsitepackages())'
	$(call test_python, $(1) ) -m site

endef

define deb_python_test

	$(call remove_pycache, $(1) )

	: # run standard test suite
	env -C $(strip $(1)) \
	  LD_LIBRARY_PATH=$(call x_python_LD_LIBRARY_PATH,$(strip $(1)),) \
	  CONTAINER_PYTHON_COMPAT=1 \
	  NPROC=$(NPROC_MAKE) \
	make test TESTOPTS='-j $(NPROC_TEST) $(TEST_OPTS)' $(if $(strip $(2)),|| $(strip $(2)))

	$(call remove_pycache, $(1) )

endef

define remove_pycache

	: # $(strip $(1)): remove Python cache
	find $(strip $(1))/ -name __pycache__ -type d -exec rm -rf {} +
	find $(strip $(1))/ -name '*.py[co]' -ls -delete

endef

define fix_hashbangs_r

	hashbang_rx='#!.*[/ ]python[^ ]*' ; \
	list=$(strip $(1)).hashbang ; \
	find $(strip $(1))/ -type f -exec grep -EIl "$${hashbang_rx}" {} + \
	> $${list} || : ; \
	if [ -s "$${list}" ] ; then \
		while read -r f ; do \
			[ -n "$$f" ] || continue ; \
			x_flag=1 ; \
			[ -x "$$f" ] || x_flag= ; \
			sed -E "1s$(xsedx)$${hashbang_rx}$(xsedx)#!/$(PYTHON_BINARY)$(xsedx)" \
			< $$f > $${list}.tmp ; \
			if ! cmp -s $${list}.tmp $$f ; then \
				echo "# fixed hashbang: $$f" ; \
				mv -f $${list}.tmp $$f ; \
			fi ; \
			if [ -z "$${x_flag}" ] ; then \
				echo "# fixed permissions: $$f" ; \
			fi ; \
			chmod 0755 $$f ; \
		done < $${list} >&2 ; \
		rm -f $${list}.tmp ; \
	fi ; \
	rm -f $${list}

endef

replace_string = -e "s/ $(1) / $(2) /g;s/ $(1)/ $(2)/g;s/$(1) /$(2) /g;s/$(1)/$(2)/g"
remove_string  = -e "s/ $(1) / $(2)/g;s/ $(1)/ $(2)/g;s/$(1) /$(2) /g;s/$(1)/$(2)/g"
replace_prefixed = $(call replace_string,$(1)[^[:space:]\"']*,$(2))
remove_prefixed  = $(call replace_prefixed,$(1)[^[:space:]\"']*,)

fake_srcdir =/usr/local/src/python-$(DEB_VERSION_UPSTREAM)

define buildrepro_backup

	mkdir -p $(shell printf '%s' $(dir $(strip $(1))) | sed -zE 's,^debian/[^/]+/,debian/dist.orig/,')

	cp $(strip $(1)) $(shell printf '%s' $(strip $(1)) | sed -zE 's,^debian/[^/]+/,debian/dist.orig/,')

endef

# TODO: re-sync periodically with "sysconfig_substflags" in Debian
define buildrepro_fix

	sed -i \
		-e 's|$(CC)|$(DEB_HOST_GNU_TYPE)-gcc|g' \
		-e 's|$(CC)|$(DEB_HOST_GNU_TYPE)-gcc|g' \
		-e 's|$(CXX)|$(DEB_HOST_GNU_TYPE)-g++|g' \
		-e 's|$(AR)|$(DEB_HOST_GNU_TYPE)-gcc-ar|g' \
		-e 's|$(RANLIB)|$(DEB_HOST_GNU_TYPE)-gcc-ranlib|g' \
	$(strip $(1))

	sed -i -E \
		$(call remove_prefixed,LD_LIBRARY_PATH=) \
		$(call remove_prefixed,-f(debug|file|macro|profile)-prefix-map=) \
		$(call remove_prefixed,-fprofile-dir=) \
		$(call replace_prefixed,-fstack-protector,-fstack-protector-strong) \
		$(call replace_string,-fstack-protector-strong-strong,-fstack-protector-strong) \
		$(call remove_prefixed,--param=ssp-buffer-size=) \
		$(call remove_prefixed,-specs=) \
		$(call remove_string,-Wl$(comma)-z$(comma)now) \
		$(call remove_string,-L\.) \
		$(call replace_string,-Wl$(comma)-z$(comma)relro +-Wl$(comma)-z$(comma)relro,-Wl$(comma)-z$(comma)relro) \
		-e 's/^RUNSHARED\s*=.*$$/RUNSHARED=/g' \
	$(strip $(1))

 	sed -i \
 		-e 's|$(CURDIR)|$(fake_srcdir)|g' \
 	$(strip $(1))

endef

define buildrepro_compare

	mkdir -p $(shell printf '%s' $(dir $(strip $(1))) | sed -zE 's,^debian/[^/]+/,debian/dist/,')

	cp $(strip $(1)) $(shell printf '%s' $(strip $(1)) | sed -zE 's,^debian/[^/]+/,debian/dist/,')

	set +e ; diff -Naru --color \
	$(shell printf '%s' $(strip $(1)) | sed -zE 's,^debian/[^/]+/,debian/dist.orig/,') \
	$(shell printf '%s' $(strip $(1)) | sed -zE 's,^debian/[^/]+/,debian/dist/,') \
	|| :

endef

# "aio" stands for "all-in-one"
define buildrepro_aio

	$(call buildrepro_backup, $(1) )
	$(call buildrepro_fix, $(1) )
	$(call buildrepro_compare, $(1) )

endef

sysconfig_file = debian/tmp/$(PYTHON_MODULES)/_sysconfigdata__$(DEB_HOST_MULTIARCH).py

limb_python = $(call x_python, $(CURDIR)/debian/tmp/$(PYTHON_PREFIX) , lib , bin/python$(PYTHON_BASE_VERSION) , fakeroot )

define deb_python_install

	rm -rf debian/tmp

	DEB_PYTHON_BUILD_DIR=$(strip $(1)) \
	dh_auto_install --sourcedir=$(strip $(1)) --builddir=$(strip $(1))

	rm -rf $(strip $(1))

	: # revert build-time quirks
	env -C debian/tmp/$(PYTHON_MODULES) \
	patch -p2 -R < $(CURDIR)/debian/patches/quirks/distutils-build.patch

	$(call remove_pycache, debian/tmp )

	: # remove manpages
	rm -rf debian/tmp/$(PYTHON_PREFIX)/share/man/

	: # preserve only small part of builtin testsuite
	d=debian/tmp/$(PYTHON_MODULES)/test ; \
	rm -f debian/test.tar ; \
	find $$d/ -regextype egrep \
	  -regex '.+/test/(libregrtest|support|(__.+|ann_module.*|regrtest|test_support)\.py)$$' \
	  -exec tar -cvf debian/test.tar {} + ; \
	rm -rf $$d

	: # remove builtin testsuite
	d=debian/tmp/$(PYTHON_PREFIX) ; \
	find $$d/ -path '*/lib/*/test'  -type d -exec rm -rf {} + ; \
	find $$d/ -path '*/lib/*/tests' -type d -exec rm -rf {} +

	: # restore builtin testsuite
	tar -xf debian/test.tar ; rm -f debian/test.tar

	: # copy pip.conf
	mkdir -p debian/tmp/$(PYTHON_PREFIX)/share
	cp $(PIP_CONF) debian/tmp/$(PYTHON_PREFIX)/share/pip.conf

	: # remove non-fully versioned symlinks
	find debian/tmp/ -path '*/bin/*' -type l -exec rm -vf {} +
	find debian/tmp/ -path '*/lib/$(DEB_HOST_MULTIARCH)/pkgconfig/*' -type l -exec rm -vf {} +

	: # file name mangling
	cd debian/tmp/$(PYTHON_PREFIX)/bin ; \
	mv python$(PYTHON_BASE_VERSION) python ; \
	ln -s python python$(PYTHON_BASE_VERSION) ; \
	ln -s python python$(PYTHON_MAJOR_VERSION) ; \
	mv pydoc$(PYTHON_BASE_VERSION) pydoc ; \
	ln -s pydoc pydoc$(PYTHON_BASE_VERSION) ; \
	ln -s pydoc pydoc$(PYTHON_MAJOR_VERSION) ; \
	mv 2to3-$(PYTHON_BASE_VERSION) 2to3 ; \
	ln -s 2to3 2to3-$(PYTHON_BASE_VERSION) ; \
	mv python$(PYTHON_BASE_VERSION)-config python-config ; \
	ln -s python-config python$(PYTHON_BASE_VERSION)-config ; \
	ln -s python-config python$(PYTHON_MAJOR_VERSION)-config ; \
	ln -s python-config $(DEB_HOST_MULTIARCH)-python$(PYTHON_BASE_VERSION)-config ; \
	ln -s python-config $(DEB_HOST_MULTIARCH)-python$(PYTHON_MAJOR_VERSION)-config ; \
	mv idle$(PYTHON_BASE_VERSION) idle ; \
	ln -s idle idle$(PYTHON_BASE_VERSION) ; \
	ln -s idle idle$(PYTHON_MAJOR_VERSION)

	rm -rf debian/dist debian/dist.orig

	$(call buildrepro_aio, debian/tmp/$(PYTHON_PREFIX)/bin/python-config )
	$(call buildrepro_aio, debian/tmp/$(PYTHON_MODULES)/config-$(PYTHON_BASE_VERSION)-$(DEB_HOST_MULTIARCH)/config.c )
	$(call buildrepro_aio, debian/tmp/$(PYTHON_MODULES)/config-$(PYTHON_BASE_VERSION)-$(DEB_HOST_MULTIARCH)/Makefile )

	$(call buildrepro_backup, $(sysconfig_file) )

	: # adjust sysconfigdata
	cat \
	  debian/regen-sysconfigdata.py.pre \
	  $(sysconfig_file) \
	  debian/regen-sysconfigdata.py.post \
	> debian/tmp/regen-sysconfigdata.py
	$(limb_python) debian/tmp/regen-sysconfigdata.py \
	  $(sysconfig_file)
	rm -f debian/tmp/regen-sysconfigdata.py

	$(call buildrepro_fix, $(sysconfig_file) )
	sed -i -E \
	  -e 's/  +/ /g' \
	$(sysconfig_file)
	$(call buildrepro_compare, $(sysconfig_file) )

	: # list installed packages
	$(limb_python) -m pip list --format json \
	> debian/pip.list.json

	: # upgrade installed packages
	$(limb_python) -m pip install --upgrade \
	  $$(jq -r '.[].name' < debian/pip.list.json)

	: # install wheel
	$(limb_python) -m pip install wheel

	: # list installed packages (refreshing version info)
	$(limb_python) -m pip list --format json \
	> debian/pip.list.json

	: # produce list of individual installed packages
	jq -r '.[] | "pipver:" + .name + "=" + .version' \
	< debian/pip.list.json \
	> debian/pip.substvars

	: # adjust ensurepip: package versions
	ver_pip=$$(jq -r '.[] | select(.name=="pip") | .version' < debian/pip.list.json) ; \
	ver_setuptools=$$(jq -r '.[] | select(.name=="setuptools") | .version' < debian/pip.list.json) ; \
	sed -i -E \
	  -e 's/^_PIP_VERSION\s*=\s*.+/_PIP_VERSION = "'"$${ver_pip}"'"/' \
	  -e 's/^_SETUPTOOLS_VERSION\s*=\s*.+/_SETUPTOOLS_VERSION = "'"$${ver_setuptools}"'"/' \
	debian/tmp/$(PYTHON_MODULES)/ensurepip/__init__.py

	$(call remove_pycache, debian/tmp )

	: # file name mangling
	cd debian/tmp/$(PYTHON_PREFIX)/bin ; \
	mv pip$(PYTHON_BASE_VERSION) safe.pip ; \
	find ./ -name 'pip*' -ls -delete ; \
	mv safe.pip pip ; \
	ln -s pip pip$(PYTHON_BASE_VERSION) ; \
	ln -s pip pip$(PYTHON_MAJOR_VERSION) ; \
	mv wheel safe.wheel ; \
	find ./ -name 'wheel*' -ls -delete ; \
	mv safe.wheel wheel ; \
	ln -s wheel wheel$(PYTHON_BASE_VERSION) ; \
	ln -s wheel wheel$(PYTHON_MAJOR_VERSION)

	: # adjustments after ensurepip/pip
	d=debian/tmp/$(PYTHON_MODULES) ; \
	src=$$d/site-packages ; \
	dst=$$d/dist-packages ; \
	mv $${src} $${dst} ; \
	mkdir -p $${src} ; \
	mv $${dst}/README.txt $${src}/

	$(call fix_hashbangs_r, debian/tmp )

endef

override_dh_auto_build:
	$(call deb_python_configure, $(CURDIR)/debian/build , )
	$(call deb_python_build, $(CURDIR)/debian/build , )

	: # revert build-time quirks
	env -C $(CURDIR)/debian/build \
	patch -p1 -R < $(CURDIR)/debian/patches/quirks/ensurepip.patch

	rm -rf $(INSTALL_BSTRAP)
	$(call deb_python_install, $(CURDIR)/debian/build )

	: # adjust ensurepip: download fresh wheels
	wheel_dir=debian/tmp/$(PYTHON_MODULES)/ensurepip/_bundled ; \
	find $${wheel_dir}/ -name '*.whl' -ls -delete ; \
	jq -r '.[] | .name + " " + .version' < debian/pip.list.json \
	| while read -r name version ; do \
	  [ -n "$${name}" ] || continue ; \
	  [ -n "$${version}" ] || continue ; \
	  env -C $${wheel_dir} $(limb_python) -m pip download "$${name}==$${version}" ; \
	done ; \
	find $${wheel_dir}/ -name '*.whl' -ls

	$(call remove_pycache, $(CURDIR) )

	: # preserve shared install
	mv debian/tmp $(INSTALL_BSTRAP)

	: # minor hack for shared python
	top=$(INSTALL_BSTRAP)/$(PYTHON_MODULES) ; \
	src=$${top}/dist-packages ; \
	dst=$${top}/site-packages ; \
	rm -rf $${dst} ; \
	mv $${src} $${dst}

	: # propagate modified "ensurepip" to sources
	rm -rf Lib/ensurepip ; \
	tar -C $(INSTALL_BSTRAP)/$(PYTHON_MODULES) -cf - ensurepip \
	| tar -C Lib -xf -

	$(call deb_python_configure, $(CURDIR)/debian/build , $(CONFIGURE_FLAGS_FINAL) )
	$(call deb_python_build, $(CURDIR)/debian/build )
	$(call deb_python_test, $(CURDIR)/debian/build , $(if $(filter nocheck,$(DEB_BUILD_OPTIONS)), true, false) )

override_dh_auto_test:

override_dh_auto_install:
	$(call deb_python_install, $(CURDIR)/debian/build )

	$(call remove_pycache, $(CURDIR) )

	: # remove versioned symlinks
	find debian/tmp/ -path '*/bin/*' -type l -exec rm -vf {} +

execute_before_dh_install:
	chmod +x debian/thin-ci.sh

include debian/rules.install-extras

override_dh_install:
	dh_install -p thin-ci-container-python-$(PYTHON_BASE_VERSION)

	$(call dh_install_move, container-python-$(PYTHON_BASE_VERSION)-misc )
	$(call dh_install_move, container-python-$(PYTHON_BASE_VERSION)-dev )
	$(call dh_install_move, container-python-$(PYTHON_BASE_VERSION)-full )
	$(call dh_install_move, container-python-$(PYTHON_BASE_VERSION) )

	: # move dist-packages/pkg_resources to base package
	s=debian/container-python-$(PYTHON_BASE_VERSION)-full ; \
	d=debian/container-python-$(PYTHON_BASE_VERSION) ; \
	s=$$s/$(PYTHON_MODULES)/dist-packages ; \
	d=$$d/$(PYTHON_MODULES)/dist-packages ; \
	mkdir -p $$d ; \
	tar -C $$s -cf - pkg_resources | tar -C $$d -xf - ; \
	rm -rf $$s/pkg_resources

	: # move non-native platform files (if any)
	s=debian/container-python-$(PYTHON_BASE_VERSION)-full ; \
	d=debian/container-python-$(PYTHON_BASE_VERSION)-misc ; \
	if find $$s/ -iname '*.exe' -printf . -quit | grep -Fq . ; then \
	    find $$s/ -iname '*.exe' -printf '%P\0' \
	    | tar -C $$s --null -T - -cf - \
	    | tar -C $$d -xf - ; \
	    find $$s/ -iname '*.exe' -delete ; \
	fi

ifeq ($(with_pgo)$(pgo_reuse),yesno)
	d=debian/$(DEB_PGO_PACKAGE)/$(DEB_PGO_FROM_PKG) ; \
	mkdir -p $$d ; \
	tar -C $(DEB_PGO_FROM_BUILD) -cf - . \
	| tar -C $$d -xf -
endif

# if there're files left - dh_missing will do the job (raise error)

override_dh_strip_nondeterminism:
	dh_strip_nondeterminism $(addprefix --exclude=,.exe .gcda .png .whl)

execute_after_dh_fixperms:
	find debian/ -path '*/bin/*' -type f -exec chmod 0755 {} +
	find debian/ -path '*/thin-ci.sh' -type f -exec chmod 0755 {} +

override_dh_dwz:
	dh_dwz $(addprefix --exclude=,.exe .gcda)

override_dh_strip:
	dh_strip $(addprefix --exclude=,.exe .gcda)

DH_GENCTRL_COMMON = -Tdebian/pip.substvars -Tdebian/substvars
override_dh_gencontrol:
	dh_gencontrol -- $(DH_GENCTRL_COMMON)
ifeq ($(with_pgo),yes)
	dh_gencontrol -a -- -DX-Pgo-Source-Id=$(pgo_src_id) $(DH_GENCTRL_PGO) $(DH_GENCTRL_COMMON)
  ifeq ($(pgo_reuse),no)
	dh_gencontrol --package=$(DEB_PGO_PACKAGE) -- -v$(DEB_TSVER) -UX-Pgo-Source-Id $(DH_GENCTRL_PGO) $(DH_GENCTRL_COMMON)
  endif
endif

# sync with Debian (periodically)
execute_before_dh_builddeb:
	set +e ; \
	find $(foreach p, $(shell dh_listpackages), debian/$(p)/ ) -type f \
	  -exec grep -aFl -e $(CURDIR) {} + \
	| sort -V > debian/build.reproducible ; \
	if [ -s debian/build.reproducible ] ; then \
		echo ; \
		echo '# detected build path leakage in files:' ; \
		echo ; \
		cat debian/build.reproducible ; \
		echo ; \
	fi >&2 ; \
	find $(foreach p, $(shell dh_listpackages), debian/$(p)/ ) -type f \
	  -exec grep -aEl -e '(LD_LIBRARY|LD_PRELOAD|fakeroot|eatmydata|f(debug|file|macro|profile)-prefix-map|flto|ffat-lto|fuse-linker-plugin|fprofile|param=ssp-buffer-size=4|specs=|Wl,-z,now)' {} + \
	| sort -V > debian/build.reproducible ; \
	if [ -s debian/build.reproducible ] ; then \
		echo ; \
		echo '# detected (possible) build env leakage in files:' ; \
		echo ; \
		cat debian/build.reproducible ; \
		echo ; \
	fi >&2 ; \
	rm -f debian/build.reproducible

# -- package templating - here goes dragons! --

_deb_control_templates = $(wildcard debian/*PYVER*)
_deb_rename =$(subst PYVER,$(PYTHON_BASE_VERSION),$(strip $(1)))

include debian/rules.self-template
