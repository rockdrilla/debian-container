#!/bin/sh
# SPDX-License-Identifier: Apache-2.0
# (c) 2022-2023, Konstantin Demin

set -ef

have_cmd() { command -v "$1" >/dev/null 2>&1 ; }

case "$1" in
--stage1 )
	shift

	dsc="${1:?}"
	dest_dir="${2:?}"
	shift 2

	build_dir=$(mktemp -d ${DEB_SRC_BUILD_DIR:+ -p "${DEB_SRC_BUILD_DIR}" } build.XXXXXXXXXX)
	: "${build_dir:?}"
	chmod 0755 "${build_dir}"

	bd_fields='Build-Depends Build-Depends-Arch Build-Depends-Indep'
	deps=$( { for f in ${bd_fields} ; do deb822-get-field "$f" "${dsc}" ; done ; } | sed -zE 's/\n/, /g;s/,+/,/g;s/^,//;s/,$//' )

	set +e

	build_dir_userspec=$(env stat -c '%u:%g' "${build_dir}")

	export APT_WRAP_INSTALL_METHOD='satisfy'
	apt-wrap \
	  "build-essential, debhelper, eatmydata, fakeroot, ${deps}" \
	  "$0" --stage2 "${build_dir}" "${dsc}" "$@"
	r=$?

	case "${DEB_SRC_BUILD_PURGE:-success}" in
	success | always | never ) ;;
	* )
		echo " ${0##*/}: unknown value DEB_SRC_BUILD_PURGE, using 'always', provided: ${DEB_SRC_BUILD_PURGE}" >&2
		DEB_SRC_BUILD_PURGE=always
	;;
	esac

	find "${build_dir}" -maxdepth 1 -type f -exec chown "${build_dir_userspec}" '{}' '+'
	find "${build_dir}" -maxdepth 1 -type f -exec mv -vf -t "${dest_dir}" '{}' '+'

	case "${DEB_SRC_BUILD_PURGE:-success}" in
	success )
		[ $r = 0 ] || chown -Rh "${build_dir_userspec}" "${build_dir}"
	;;
	never )
		chown -Rh "${build_dir_userspec}" "${build_dir}"
	;;
	esac

	case "${DEB_SRC_BUILD_PURGE:-success}" in
	success )
		[ $r = 0 ] && rm -rf "${build_dir}"
	;;
	always )
		rm -rf "${build_dir}"
	;;
	esac

	exit $r
;;
--stage2 )
	shift

	umask 022

	build_dir="${1:?}"
	dsc=$(readlink -e "${2:?}")
	shift 2

	pkg_name=$(deb822-get-field Source "${dsc}")
	[ -n "${pkg_name}" ]
	pkg_ver=$(deb822-get-field Version "${dsc}")
	[ -n "${pkg_ver}" ]

	pkg_ver_list=$(deb-ver-parse "${pkg_ver}")
	[ -n "${pkg_ver_list}" ]

	unset ver_epoch ver_upstream ver_revision
	IFS='|' read -r ver_epoch ver_upstream ver_revision <<-EOF
	${pkg_ver_list}
	EOF

	scr_dir="${pkg_name}-${ver_upstream}"
	[ -n "${ver_upstream}" ] || scr_dir="${pkg_name}-${ver_revision}"

	cd "${build_dir}"

	dpkg-source -x "${dsc}"

	# cleanup after dpkg-source (not really needed)
	find ./ -mindepth 1 -maxdepth 1 -name "${pkg_name}_*.orig*" -delete

	# adjust permissions
	find ./ -mindepth 1 \
	  '(' -executable -exec chmod 0755 {} + ')' \
	  ',' \
	  '(' ! -executable -exec chmod 0644 {} + ')'

	runas=
	runas_root=$(deb822-get-field Rules-Requires-Root "${scr_dir}/debian/control")
	if [ "${runas_root}" = no ] ; then
		userspec="${DEB_SRC_BUILD_USERSPEC:-nobody:nogroup}"
		runas="$(command -v run-as) ${userspec}"
		chown -Rh "${userspec}" "${build_dir}"
	fi

	cd "${scr_dir}"

	# source packages must not depend on /usr/local
	reparse_path() {
		printf '%s' "${PATH}" \
		| tr -s ':' '\0' \
		| grep -zEv '^/usr/local(/|$)' \
		| paste -zsd':' \
		| tr -d '\0'
	}
	PATH=$(reparse_path)
	export PATH
	echo "# PATH=${PATH}" >&2

	exec \
	${runas} \
	eatmydata \
	dpkg-buildpackage \
	  --no-post-clean \
	  --unsigned-source \
	  --unsigned-buildinfo \
	  --unsigned-changes \
	  --no-sign \
	"${@:---build=all,any}"
;;
esac

exec "$0" --stage1 "$@"
