#!/bin/sh
# SPDX-License-Identifier: Apache-2.0
# (c) 2021-2023, Konstantin Demin

set -f

rule_stanza='^(delete|keep)=(.+)$'
reformat_xglob='s/^delete/match/;s/^keep/skip/'

me="${0##*/}"
usage() {
	cat >&2 <<-EOF
	# usage: ${me} [options] <config> [<config> ..]
	# options:
	#  -p <dir>, --path <dir>, --path=<dir>
	#    root directory (for stanzas with relative paths)
	#  -r, --recurse
	#    handle directories as well as files
	#  -v, --verbose
	#    verbose removal
	EOF
	exit "${1:-0}"
}
[ $# != 0 ] || usage

msg() { echo ${1:+"# ${me}: $*"} >&2 ; }
msgf() {
	_____fmt="$1" ; shift
	env printf "# ${me}: ${_____fmt}\\n" ${@+"$@"} >&2
	unset _____fmt
}

# very naive: just check value presence
verify_path() {
	[ -z "$1" ] || return 0
	msgf 'error: wrong path specifier: %q' "$1"
	usage 1
}

o_path=
f_rmdir=
f_verbose=

# process options
want_value=
n_opt=0
for i ; do
	if [ -n "${want_value}" ] ; then
		case "${want_value}" in
		path)
			o_path="$i"
			verify_path "${o_path}"
		;;
		esac

		want_value=
		n_opt=$((n_opt+1))
		continue
	fi

	case "$i" in
	-p | --path | --path=* )
		if [ -n "${o_path}" ] ; then
			msg 'error: root directory already set'
			usage 1
		fi
		case "$i" in
		*=* )
			o_path="${i#*=}"
			verify_path "${o_path}"
		;;
		* ) want_value=path ;;
		esac
	;;
	-r | --recurse )
		if [ -n "${f_rmdir}" ] ; then
			msg 'error: recurse flag already set'
			usage 1
		fi
		f_rmdir=1
	;;
	-v | --verbose )
		if [ -n "${f_verbose}" ] ; then
			msg 'error: verbose flag already set'
			usage 1
		fi
		f_verbose=1
	;;
	-*)
		msgf 'unknown option: %q' "$i"
		usage 1
	;;
	*) break ;;
	esac

	n_opt=$((n_opt+1))
done

[ ${n_opt} = 0 ] || shift ${n_opt}

[ $# != 0 ] || usage 1

[ -n "${o_path}" ] || o_path=/

rm="rm -f${f_rmdir:+r}${f_verbose:+v}"

# work directory
w=$(mktemp -d) ; : "${w:?}"

_cleanup() {
	cd /
	rm -rf -- "$w"
}

grep -hE "${rule_stanza}" "$@" </dev/null \
| sort -uV > "$w/rules"

# nothing to match at all
if ! [ -s "$w/rules" ] ; then
	_cleanup
	exit 0
fi

sed -E "${reformat_xglob}" "$w/rules" > "$w/rules.xglob"
xglob "${o_path}" "$w/rules.xglob" -- printf '%s\0' > "$w/list"

# nothing to filter at all
if ! [ -s "$w/list" ] ; then
	_cleanup
	exit 0
fi

# remove files immediately
xargs -r -0 ${rm} < "$w/list"

# TODO: deal with diversions?

_cleanup
exit 0
