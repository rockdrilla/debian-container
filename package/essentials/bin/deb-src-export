#!/bin/sh
# SPDX-License-Identifier: Apache-2.0
# (c) 2020-2023, Konstantin Demin

set -ef

tar_opts='--blocking-factor=1 --format=gnu --no-selinux --no-xattrs --sparse'

unset LANGUAGE LC_CTYPE LC_NUMERIC LC_TIME LC_COLLATE
unset LC_MONETARY LC_MESSAGES LC_PAPER LC_NAME LC_ADDRESS
unset LC_TELEPHONE LC_MEASUREMENT LC_IDENTIFICATION
unset POSIXLY_CORRECT TAR_OPTIONS

export LC_ALL=C.UTF-8
export LANG=C.UTF8

have_cmd() { command -v "$1" >/dev/null 2>&1 ; }

ro_git() { GIT_OPTIONAL_LOCKS=0 command git "$@" ; }

find_fast() {
	find "$@" -printf . -quit | grep -Fq .
}

need_pkg=
for i in 'dh:debhelper' 'gcc' 'dpkg-parsechangelog:dpkg-dev' ; do
	unset bin pkg
	IFS=: read -r bin pkg <<-EOF
	$i
	EOF
	[ -n "${pkg}" ] || pkg=${bin}
	have_cmd "${bin}" || need_pkg="${need_pkg} ${pkg}"
done

if [ -n "${need_pkg}" ] ; then
	exec apt-wrap "${need_pkg}" "$0" "$@"
fi

have_git=
while [ "${DEB_SRC_EXPORT_GIT:-1}" = 1 ] ; do
	have_cmd git || break
	ro_git rev-parse --is-inside-work-tree >/dev/null 2>&1 || break

	have_git=1
	break
done

want_gpg=
while [ "${DEB_SRC_EXPORT_GNUPG:-1}" = 1 ] ; do
	have_cmd gpg || break

	[ -z "${DEB_SIGN_KEYID}" ] || want_gpg=1

	if [ -n "${have_git}" ] ; then
		if ro_git config --get commit.gpgsign | grep -Fxq true ; then
			want_gpg=1
		fi
	fi

	break
done

SIGN_OPT=
if [ -n "${want_gpg}" ] ; then
	sign_file() { gpg-sign-file "$@"; }
else
	SIGN_OPT='--no-sign'
	sign_file() { :; }

	unset DEB_SIGN_KEYID DEBEMAIL DEBFULLNAME GNUPGHOME
	unset GPG_AGENT_INFO GPG_TTY PINENTRY_USER_DATA
	unset SSH_AGENT_PID SSH_AUTH_SOCK
fi

deb_folder='debian'
if [ -z "$2" ] ; then
	if [ -n "${have_git}" ] ; then
		cd "$(ro_git rev-parse --show-toplevel)"
	fi
else
	deb_folder=$(printf '%s' "$2" | sed -zE 's,/+,/,g;s,/$,,')
fi

# basic verification of debian/ folder
[ -d "${deb_folder}" ]
[ -s "${deb_folder}/rules" ]

if [ "${deb_folder##*/}" = . ] ; then
	deb_folder=$( ( cd "${deb_folder}" ; pwd ; ) )
fi

export SOURCE_DATE_EPOCH=$(date -u +%s)

temp_folder=$(mktemp -d) ; : "${temp_folder:?}"

# prepare/warmup GnuPG
# if signing is disabled then it does nothing with files or GnuPG
date > "${temp_folder}/t" ; sign_file "${temp_folder}/t" ; rm -f "${temp_folder}/t"

# (early) grab source package related files
mkdir -p "${temp_folder}/debian"
find "${deb_folder}/" -mindepth 1 -maxdepth 1 -printf '%P\0' \
| tar -C "${deb_folder}" ${tar_opts} --dereference --null -T - -cf - \
| tar -C "${temp_folder}/debian" -xf -

chmod 0755 "${temp_folder}/debian/rules"

d_rules() { DPKG_BUILD_API="${DPKG_BUILD_API:-0}" debian/rules "$@" ; }

(
	cd "${temp_folder}"

	set +e

	# refresh control files
	d_rules clean
	d_rules debian/control
	d_rules debian/changelog
)
if ! [ -s "${temp_folder}/debian/control" ] ; then
	echo "# ${0##*/}: debian/control is missing/unreproducible for ${deb_folder}/!"
	rm -rf "${temp_folder}"
	exit 1
fi

# retrieve only desired fields from dpkg-parsechangelog output
if ! dpkg-parsechangelog -l "${temp_folder}/debian/changelog" > "${temp_folder}/changelog" ; then
	rm -rf "${temp_folder}"
	exit 1
fi

pkg_name=$(deb822-get-field Source "${temp_folder}/changelog")
pkg_ver=$(deb822-get-field Version "${temp_folder}/changelog")
pkg_ts=$(deb822-get-field Timestamp "${temp_folder}/changelog")

rm -f "${temp_folder}/changelog"

export SOURCE_DATE_EPOCH=${pkg_ts}

pkg_ver_list=$(deb-ver-parse "${pkg_ver}")
[ -n "${pkg_ver_list}" ]

unset ver_epoch ver_upstream ver_revision
IFS='|' read -r ver_epoch ver_upstream ver_revision <<EOF
${pkg_ver_list}
EOF

T="$1"
if [ -z "$T" ] ; then
	T=$(mktemp -d) ; : "${T:?}"
	echo "output directory (auto-created): $T" >&2
else
	echo "output directory: $T" >&2
	mkdir -p "$T"
fi

if [ -z "${ver_upstream}" ] ; then
	# native package
	# do as simple as possible
	W="$T/${pkg_name}-${ver_revision}" ; mkdir -p "$W"
	echo "working directory (as subdirectory of output): $W" >&2
else
	# regular package
	# do some tricks! :)
	W=$(mktemp -d)
	echo "working directory (auto-created): $W" >&2
fi

_cleanup() {
	cd /
	rm -rf -- "$W" ; rm -rf -- "$T"
}

_finish_export() {
	cd "$T" ; rm -rf -- "$W"
	echo "index of $T" >&2
	ls -lhgG >&2
}

# move files to "permanent" location
tar -C "${temp_folder}" ${tar_opts} -cf - debian \
| tar -C "$W" -xf -
rm -rf "${temp_folder}" ; unset temp_folder

if [ -z "${ver_upstream}" ] ; then
	# native package
	# grab all the things (except Git)
	(
		cd "${deb_folder}/.."
		if [ -n "${have_git}" ] ; then
			git ls-files -z
		else
			find ./ -mindepth 1 -maxdepth 1 -printf '%P\0'
		fi \
		| sed -zE '/^(\.git|debian)(\/|$)/d' \
		| tar ${tar_opts} --null -T - -cf - \
		| tar -C "$W" -xf -
	) || { _cleanup ; exit 1 ; }
fi

export TAR_OPTIONS="${tar_opts} --mtime @${pkg_ts} --sort=name --numeric-owner --owner=0 --group=0 --exclude-vcs"

if [ -z "${ver_upstream}" ] ; then
	# native package
	# do as simple as possible
	cd "$W"

	dpkg-buildpackage --build=source -z9 -d -nc ${SIGN_OPT} || { _cleanup ; exit 1 ; }

	_finish_export
	exit
fi

# regular package
# here goes magic and dragons

# shortcuts
pnu="${pkg_name}_${ver_upstream}"
pnd="${pnu}-${ver_revision}"
pna="${pnd}_source"

# try copy upstream source tarball(s) (if any)
(
	cd "${deb_folder}/.."

	for d in '..' '.' ; do
		# main tarball
		find "$d/" -follow -mindepth 1 -maxdepth 1 -type f -name "${pnu}.orig.*" \
		-exec cp -vaL -t "$T" {} +
		# extra tarball(s) for multiple upstream tarball (MUT) package
		find "$d/" -follow -mindepth 1 -maxdepth 1 -type f -name "${pnu}.orig-*.*" \
		-exec cp -vaL -t "$T" {} +
	done
) || { _cleanup ; exit 1 ; }

cd "$W"

d_rules debian/watch || :

(
	# verify that we have upstream tarball(s)
	find_fast "$T" -mindepth 1 -maxdepth 1 -name "${pnu}.orig.*" -type f || {
		uscan_pre=
		have_cmd uscan || uscan_pre='apt-wrap devscripts'
		${uscan_pre} uscan --destdir "$T" --download-current-version --rename
	}

	tar -cf - debian | xz -9 > "$T/${pnd}.debian.tar.xz"

	# hackish way to generate .dsc with minimal overhead
	dpkg-source-raw "$T" || exit 1

	sign_file "$T/${pnd}.dsc"

	dpkg-genbuildinfo --build=source -u"$T" -O > "$T/${pna}.buildinfo"
	sign_file "$T/${pna}.buildinfo"

	dpkg-genchanges --build=source -u"$T" > "$T/${pna}.changes"
	sign_file "$T/${pna}.changes"

	_finish_export
	exit
) || { _cleanup ; exit 1 ; }
