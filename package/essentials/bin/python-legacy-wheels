#!/bin/sh
# SPDX-License-Identifier: Apache-2.0
# (c) 2023, Konstantin Demin

set -ef

me="${0##*/}"
usage() {
	cat >&2 <<-EOF
	# usage: ${me} [options] <wheel directory> <pip wheel parameters>
	# options:
	#  -V <version>, --python-version <version>, --python-version=<version>
	#    Python version selector
	EOF
	exit "${1:-0}"
}

msg() { echo ${1:+"# ${me}: $*"} >&2 ; }
msgf() {
	_____fmt="$1" ; shift
	env printf "# ${me}: ${_____fmt}\\n" ${@+"$@"} >&2
	unset _____fmt
}

# naive check for format
verify_version() {
	case "$1" in
	[1-9].[0-9] | [1-9].[1-9][0-9] )
		return 0
	;;
	esac
	msg 'error: python version specifier is broken (must be in form "\d+.\d+")'
	usage 1
}

o_version=

# process options
want_value=
n_opt=0
for i ; do
	if [ -n "${want_value}" ] ; then
		case "${want_value}" in
		version )
			o_version="$i"
			verify_version "${o_version}"
		;;
		esac

		want_value=
		n_opt=$((n_opt+1))
		continue
	fi

	case "$i" in
	-V | --python-version | --python-version=* )
		if [ -n "${o_version}" ] ; then
			msg 'error: python version specifier already set'
			usage 1
		fi
		case "$i" in
		*=* )
			o_version="${i#*=}"
			verify_version "${o_version}"
		;;
		* ) want_value=version ;;
		esac
	;;
	-* )
		msgf 'unknown option: %q' "$i"
		usage 1
	;;
	* ) break ;;
	esac

	n_opt=$((n_opt+1))
done

[ ${n_opt} = 0 ] || shift ${n_opt}

[ $# -ge 2 ] || usage 1

wheel_dir="$1" ; shift
if [ -z "${wheel_dir}" ] ; then
	msg "error: <wheel directory> is empty string"
	usage 1
fi
wheel_dir=$(readlink -ne "${wheel_dir}")
if [ -z "${wheel_dir}" ] ; then
	msg "error: <wheel directory> does not exist"
	usage 1
fi
if ! [ -d "${wheel_dir}" ] ; then
	msg "error: <wheel directory> is not directory"
	usage 1
fi

reparse_path() {
	printf '%s' "${PATH}" \
	| tr -s ':' '\0' \
	| grep -zEv "^$1/" \
	| paste -zsd':' \
	| tr -d '\0'
}

if [ -n "${VIRTUAL_ENV}" ] ; then
	PATH=$(reparse_path "${VIRTUAL_ENV}")
	export PATH
fi
unset VIRTUAL_ENV

pyvenv='virtualenv'
if [ -n "${o_version}" ] ; then
	pyvenv="virtualenv-${o_version}"
fi

if ! "${pyvenv}" --help >/dev/null 2>&1 ; then
	msg "error: '${pyvenv}' is missing or failed to run"
	usage 1
fi

venv_dir=$(mktemp -d)

set +e
(
	set -e
	"${pyvenv}" --system-site-packages "${venv_dir}"
	export VIRTUAL_ENV="${venv_dir}"
	export PATH="${venv_dir}/bin:${PATH}"
	pip install -U 'setuptools<68.0.0'
	wheel_tmp="${venv_dir}/tmp.wheels"
	mkdir -p "${wheel_tmp}"
	pip wheel -w "${wheel_tmp}" "$@"
	find "${wheel_tmp}/" -type f -exec cp -t "${wheel_dir}" {} +
)
r=$?

rm -rf "${venv_dir}"

exit $r
